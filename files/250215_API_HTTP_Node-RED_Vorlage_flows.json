[
    {
        "id": "2bd3248bbccea26c",
        "type": "tab",
        "label": "HTTP - API - Huober - 15.02.2025",
        "disabled": false,
        "info": "Ersteller: Huober Simon\nDatum 15.02.2025",
        "env": []
    },
    {
        "id": "e4d156ef27268fa0",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "API - GET /api/state",
        "url": "/api/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "035b72d0b44f3996",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "Check Method",
        "func": "if (msg.req.method !== \"GET\") {\n    msg.statusCode = 405;\n    msg.headers = { 'Content-Type': 'application/json' };\n    msg.payload = {\n        \"error\": \"Method Not Allowed\",\n        \"allowed_method\": \"GET\",\n        \"statuscode\": 405\n    };\n    return [null, msg];  // Block further processing\n}\n\nreturn [msg, null];  // Continue processing only for GET requests\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "a8a2633dc5158cfc"
            ],
            [
                "d60ca6a9904aacd5"
            ]
        ]
    },
    {
        "id": "a8a2633dc5158cfc",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "Generate Response",
        "func": "msg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n    \"state\": \"Online\",\n    \"name\": \"Huober-API\",\n    \"datum\": new Date().toISOString(),\n    \"statuscode\": 200,\n    \"message\": \"Herzlichen gl√ºckwunsch du hast einen erfolgreichen GET - Request gesendet\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 60,
        "wires": [
            [
                "d60ca6a9904aacd5"
            ]
        ]
    },
    {
        "id": "d60ca6a9904aacd5",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "Send Response",
        "statusCode": "",
        "headers": {},
        "x": 960,
        "y": 100,
        "wires": []
    },
    {
        "id": "eb0f974fafc5d0c0",
        "type": "comment",
        "z": "2bd3248bbccea26c",
        "name": "/api/state # Request GET beantworten",
        "info": "",
        "x": 270,
        "y": 20,
        "wires": []
    },
    {
        "id": "d4934b0ef704732e",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "API - POST /api/state",
        "url": "/api/state",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "2ad0ddcaec26f45c",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "API - PUT /api/state",
        "url": "/api/state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "232659a4354798c0",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "API - DELETE /api/state",
        "url": "/api/state",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "abfbc03ca8a42c3c",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "API - PATCH /api/state",
        "url": "/api/state",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "78862c12.e12b64",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "/api/userdata/",
        "url": "/api/userdata/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 363,
        "wires": [
            [
                "daa48d2d.58606"
            ]
        ]
    },
    {
        "id": "daa48d2d.58606",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "239bf6bc.ff85ea"
            ]
        ]
    },
    {
        "id": "3dd619a9.3d6496",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 360,
        "wires": []
    },
    {
        "id": "bc3d1a73.5b07d8",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "/api/userdata/at_user0/",
        "url": "/api/userdata/at_user0/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 403,
        "wires": [
            [
                "0c14c7611d175a07"
            ]
        ]
    },
    {
        "id": "6aa3299b.46a838",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 947,
        "y": 397,
        "wires": []
    },
    {
        "id": "a39ea2b0.12d6e",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "GET at_user0",
        "func": "const state = msg.payload;\nvar string = JSON.stringify(state);\nvar output = JSON.parse(string)\nmsg.payload = output.at_user0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 802,
        "y": 397,
        "wires": [
            [
                "6aa3299b.46a838"
            ]
        ]
    },
    {
        "id": "239bf6bc.ff85ea",
        "type": "yaml",
        "z": "2bd3248bbccea26c",
        "property": "payload",
        "name": "",
        "x": 590,
        "y": 360,
        "wires": [
            [
                "3dd619a9.3d6496"
            ]
        ]
    },
    {
        "id": "eb9d312.ed1bad",
        "type": "comment",
        "z": "2bd3248bbccea26c",
        "name": "/api/getuseratr # Request GET beantworten",
        "info": "",
        "x": 290,
        "y": 280,
        "wires": []
    },
    {
        "id": "97f0f0a4.8fc9f",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "/api/userdata/at_user1/",
        "url": "/api/userdata/at_user1/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 443,
        "wires": [
            [
                "e9039c5fcdbaf846"
            ]
        ]
    },
    {
        "id": "53d49f55.ab3a4",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 947,
        "y": 437,
        "wires": []
    },
    {
        "id": "67c2d2b5.33cc1c",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "GET at_user1",
        "func": "const state = msg.payload;\nvar string = JSON.stringify(state);\nvar output = JSON.parse(string)\nmsg.payload = output.at_user1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 802,
        "y": 437,
        "wires": [
            [
                "53d49f55.ab3a4"
            ]
        ]
    },
    {
        "id": "6fdaf17e.ab1a2",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "/api/userdata/at_user2/",
        "url": "/api/userdata/at_user2/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 483,
        "wires": [
            [
                "e98012bb78ccc02a"
            ]
        ]
    },
    {
        "id": "e7eb5dfb.34328",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 947,
        "y": 477,
        "wires": []
    },
    {
        "id": "8d47135.f8c08f",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "GET at_user2",
        "func": "const state = msg.payload;\nvar string = JSON.stringify(state);\nvar output = JSON.parse(string)\nmsg.payload = output.at_user2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 802,
        "y": 477,
        "wires": [
            [
                "e7eb5dfb.34328"
            ]
        ]
    },
    {
        "id": "0c14c7611d175a07",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 400,
        "wires": [
            [
                "3c43885b8c0e6a5d"
            ]
        ]
    },
    {
        "id": "3c43885b8c0e6a5d",
        "type": "yaml",
        "z": "2bd3248bbccea26c",
        "property": "payload",
        "name": "",
        "x": 590,
        "y": 400,
        "wires": [
            [
                "a39ea2b0.12d6e"
            ]
        ]
    },
    {
        "id": "e9039c5fcdbaf846",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "a10e14dcb555709b"
            ]
        ]
    },
    {
        "id": "a10e14dcb555709b",
        "type": "yaml",
        "z": "2bd3248bbccea26c",
        "property": "payload",
        "name": "",
        "x": 590,
        "y": 440,
        "wires": [
            [
                "67c2d2b5.33cc1c"
            ]
        ]
    },
    {
        "id": "e98012bb78ccc02a",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 480,
        "wires": [
            [
                "c57f7f1cb59e0119"
            ]
        ]
    },
    {
        "id": "c57f7f1cb59e0119",
        "type": "yaml",
        "z": "2bd3248bbccea26c",
        "property": "payload",
        "name": "",
        "x": 590,
        "y": 480,
        "wires": [
            [
                "8d47135.f8c08f"
            ]
        ]
    },
    {
        "id": "http_get_exfxx",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "GET /api/speicher",
        "url": "/api/speicher",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 620,
        "wires": [
            [
                "file_read_exfxx"
            ]
        ]
    },
    {
        "id": "file_read_exfxx",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 620,
        "wires": [
            [
                "get_response_exfxx"
            ]
        ]
    },
    {
        "id": "get_response_exfxx",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "GET Response - Formaiteren + Error",
        "func": "let content;\ntry {\n    content = JSON.parse(msg.payload);\n} catch (e) {\n    content = { error: 'File not found or invalid JSON' };\n}\nmsg.payload = {\n    content: content,\n    methods: ['GET', 'POST', 'PUT','PATCH', 'DELETE']\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 620,
        "wires": [
            [
                "http_response_exfxx"
            ]
        ]
    },
    {
        "id": "http_response_exfxx",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "Send API Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1500,
        "y": 640,
        "wires": []
    },
    {
        "id": "http_post_exfxx",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "POST /api/speicher",
        "url": "/api/speicher",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 700,
        "wires": [
            [
                "file_read_post_exfxx"
            ]
        ]
    },
    {
        "id": "file_read_post_exfxx",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 700,
        "wires": [
            [
                "merge_post_exfxx"
            ]
        ]
    },
    {
        "id": "merge_post_exfxx",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "POST Data - Zusammenf√ºgen -/ Erweitern",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};\n}\nlet newData = msg.req.body;\nObject.assign(existingData, newData);\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 700,
        "wires": [
            [
                "file_write_exfxx"
            ]
        ]
    },
    {
        "id": "file_write_exfxx",
        "type": "file",
        "z": "2bd3248bbccea26c",
        "name": "Datei √§ndern",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1170,
        "y": 660,
        "wires": [
            [
                "http_response_exfxx"
            ]
        ]
    },
    {
        "id": "http_put_exfxx",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "PATCH /api/speicher",
        "url": "/api/speicher",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 660,
        "wires": [
            [
                "9e0aab5d84bbdb8b"
            ]
        ]
    },
    {
        "id": "http_delete_exfxx",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "DELETE  /api/speicher",
        "url": "/api/speicher",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 740,
        "wires": [
            [
                "file_read_delete_exfxx"
            ]
        ]
    },
    {
        "id": "file_read_delete_exfxx",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 740,
        "wires": [
            [
                "delete_keys_exfxx"
            ]
        ]
    },
    {
        "id": "delete_keys_exfxx",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "DELETE - Keys",
        "func": "let data;\ntry {\n    data = JSON.parse(msg.payload);  // Parse existing JSON file content\n} catch (e) {\n    msg.payload = { error: \"Invalid JSON data or file not found\" };\n    return msg;\n}\n\nlet keyValuesToDelete = msg.req.body || {}; // Key-value pairs provided in the DELETE request\nlet deletedKeys = [];\n\n// Function to delete keys only if value matches (supports nested keys)\nfunction deleteMatchingKeys(obj, key, value) {\n    if (obj.hasOwnProperty(key) && obj[key] === value) {\n        delete obj[key];\n        return true;\n    }\n    for (let k in obj) {\n        if (typeof obj[k] === \"object\" && obj[k] !== null) {\n            if (deleteMatchingKeys(obj[k], key, value)) return true;\n        }\n    }\n    return false;\n}\n\n// Try deleting each key-value pair from the JSON object\nObject.entries(keyValuesToDelete).forEach(([key, value]) => {\n    if (deleteMatchingKeys(data, key, value)) {\n        deletedKeys.push({ key, value });\n    }\n});\n\n// If no keys were deleted, return an error message\nif (deletedKeys.length === 0) {\n    msg.payload = { \n        error: \"No matching key-value pairs found to delete\", \n        provided: keyValuesToDelete \n    };\n} else {\n    msg.payload = {\n        message: \"Deleted matching key-value pairs successfully\",\n        deletedKeys: deletedKeys,\n        remainingData: data\n    };\n}\n\n// Convert back to JSON string for writing to file\nmsg.payload = JSON.stringify(data, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 740,
        "wires": [
            [
                "file_write_exfxx"
            ]
        ]
    },
    {
        "id": "45220dd0f3abd20a",
        "type": "comment",
        "z": "2bd3248bbccea26c",
        "name": "JSON - File /api/speicher# Datei Bef√ºllen mit GET / PUT / POST / DELETE",
        "info": "",
        "x": 380,
        "y": 540,
        "wires": []
    },
    {
        "id": "4d2a2d1962fb7f0b",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "PUT  /api/speicher",
        "url": "/api/speicher",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 780,
        "wires": [
            [
                "549d379521656ea2"
            ]
        ]
    },
    {
        "id": "549d379521656ea2",
        "type": "file",
        "z": "2bd3248bbccea26c",
        "name": "PUT - Datei - √úberschreiben ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1220,
        "y": 780,
        "wires": [
            [
                "http_response_exfxx"
            ]
        ]
    },
    {
        "id": "33b6d654be09d368",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "PATCH Aktuallisierung Data",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};  // Falls Datei nicht existiert oder fehlerhaft ist\n}\n\nlet newData = msg.req.body;\n\n// Funktion zum tiefen Aktualisieren von JSON-Daten (auch f√ºr verschachtelte Keys)\nfunction deepMerge(target, source) {\n    for (const key in source) {\n        if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            if (!target[key] || typeof target[key] !== 'object') {\n                target[key] = {};  // Falls das Ziel keinen passenden Key hat, wird ein Objekt erstellt\n            }\n            deepMerge(target[key], source[key]);  // Rekursive Aktualisierung\n        } else {\n            target[key] = source[key];  // Wert direkt aktualisieren\n        }\n    }\n}\n\n// Anwenden der Aktualisierung\ndeepMerge(existingData, newData);\n\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 660,
        "wires": [
            [
                "file_write_exfxx"
            ]
        ]
    },
    {
        "id": "9e0aab5d84bbdb8b",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 660,
        "wires": [
            [
                "33b6d654be09d368"
            ]
        ]
    },
    {
        "id": "bf710e86a087c541",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "GET /api/datastore",
        "url": "/api/datastore",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 920,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "9af166fba403fdfc",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 940,
        "wires": [
            [
                "496826c89ddfc82c"
            ]
        ]
    },
    {
        "id": "496826c89ddfc82c",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "GET Response - Formaiteren + Error",
        "func": "let content;\ntry {\n    content = JSON.parse(msg.payload);\n} catch (e) {\n    content = { error: 'File not found or invalid JSON' };\n}\nmsg.payload = {\n    content: content,\n    methods: ['GET', 'POST', 'PUT','PATCH', 'DELETE']\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 940,
        "wires": [
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "2d40231ce057796b",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "Send API Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1860,
        "y": 920,
        "wires": []
    },
    {
        "id": "a33b04247d501c2d",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "POST /api/datastore",
        "url": "/api/datastore",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1000,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "8905cfebcb0fa700",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 1020,
        "wires": [
            [
                "eea17eb941afb3a1"
            ]
        ]
    },
    {
        "id": "eea17eb941afb3a1",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "POST Data - Zusammenf√ºgen -/ Erweitern",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};\n}\nlet newData = msg.req.body;\nObject.assign(existingData, newData);\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1020,
        "wires": [
            [
                "6241b8dac0c80997"
            ]
        ]
    },
    {
        "id": "6241b8dac0c80997",
        "type": "file",
        "z": "2bd3248bbccea26c",
        "name": "Datei √§ndern",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1570,
        "y": 980,
        "wires": [
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "c02b9d3a2f46d922",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "PATCH /api/datastore",
        "url": "/api/datastore",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 960,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "b835b06d29344b94",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 1060,
        "wires": [
            [
                "5697d9dd39d0844e"
            ]
        ]
    },
    {
        "id": "a3a840e619d0fc4b",
        "type": "comment",
        "z": "2bd3248bbccea26c",
        "name": "JSON - File /api/datastore - Abfrage Username + Passwort # Datei Bef√ºllen mit GET / PUT / POST / DELETE",
        "info": "",
        "x": 490,
        "y": 840,
        "wires": []
    },
    {
        "id": "ba987fe826211fbf",
        "type": "file",
        "z": "2bd3248bbccea26c",
        "name": "PUT - Datei - √úberschreiben ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1600,
        "y": 1060,
        "wires": [
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "b57449c8c1b3d058",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "PATCH Aktuallisierung Data",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};  // Falls Datei nicht existiert oder fehlerhaft ist\n}\n\nlet newData = msg.req.body;\n\n// Funktion zum tiefen Aktualisieren von JSON-Daten (auch f√ºr verschachtelte Keys)\nfunction deepMerge(target, source) {\n    for (const key in source) {\n        if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            if (!target[key] || typeof target[key] !== 'object') {\n                target[key] = {};  // Falls das Ziel keinen passenden Key hat, wird ein Objekt erstellt\n            }\n            deepMerge(target[key], source[key]);  // Rekursive Aktualisierung\n        } else {\n            target[key] = source[key];  // Wert direkt aktualisieren\n        }\n    }\n}\n\n// Anwenden der Aktualisierung\ndeepMerge(existingData, newData);\n\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 980,
        "wires": [
            [
                "6241b8dac0c80997"
            ]
        ]
    },
    {
        "id": "712e6a1344626452",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 980,
        "wires": [
            [
                "b57449c8c1b3d058"
            ]
        ]
    },
    {
        "id": "ac8151d6f73635a0",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "Check Authentication .\\admin / ET!admin1",
        "func": "const AUTH = { username: \"admin\", password: \"ET!admin1\" };\n\n// Pr√ºfe, ob Authentifizierung vorhanden ist\nconst authHeader = msg.req.headers.authorization;\nif (!authHeader || !authHeader.startsWith(\"Basic \")) {\n    msg.payload = { \n        error: \"Unauthorized: Missing authentication\", \n        hint: \"Use Basic Authentication with username/password\"\n    };\n    msg.statusCode = 401;\n    return [msg, null]; // Fehler direkt zur√ºckgeben\n}\n\n// Dekodieren von Base64 (Format: \"username:password\")\nconst base64Credentials = authHeader.split(\" \")[1];\nconst credentials = Buffer.from(base64Credentials, \"base64\").toString(\"utf-8\").split(\":\");\nconst username = credentials[0];\nconst password = credentials[1];\n\n// Pr√ºfe Benutzername & Passwort\nif (username !== AUTH.username || password !== AUTH.password) {\n    msg.payload = { \n        error: \"Unauthorized: Invalid username or password\", \n        hint: \"Check endpoint /api/userdata\"\n    };\n    msg.statusCode = 403;\n    return [msg, null]; // Fehler direkt zur√ºckgeben\n}\n\n// Falls korrekt -> Weiterleitung zur n√§chsten Verarbeitung\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 920,
        "wires": [
            [
                "2d40231ce057796b"
            ],
            [
                "switch_http_methods"
            ]
        ]
    },
    {
        "id": "switch_http_methods",
        "type": "switch",
        "z": "2bd3248bbccea26c",
        "name": "HTTP Method Switch",
        "property": "msg.req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PATCH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PUT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 760,
        "y": 1020,
        "wires": [
            [],
            [
                "9af166fba403fdfc"
            ],
            [
                "712e6a1344626452"
            ],
            [
                "8905cfebcb0fa700"
            ],
            [
                "b835b06d29344b94"
            ],
            [
                "ba987fe826211fbf"
            ],
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "5697d9dd39d0844e",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "DELETE - Keys",
        "func": "let data;\ntry {\n    data = JSON.parse(msg.payload);  // Parse existing JSON file content\n} catch (e) {\n    msg.payload = { error: \"Invalid JSON data or file not found\" };\n    return msg;\n}\n\nlet keyValuesToDelete = msg.req.body || {}; // Key-value pairs provided in the DELETE request\nlet deletedKeys = [];\n\n// Function to delete keys only if value matches (supports nested keys)\nfunction deleteMatchingKeys(obj, key, value) {\n    if (obj.hasOwnProperty(key) && obj[key] === value) {\n        delete obj[key];\n        return true;\n    }\n    for (let k in obj) {\n        if (typeof obj[k] === \"object\" && obj[k] !== null) {\n            if (deleteMatchingKeys(obj[k], key, value)) return true;\n        }\n    }\n    return false;\n}\n\n// Try deleting each key-value pair from the JSON object\nObject.entries(keyValuesToDelete).forEach(([key, value]) => {\n    if (deleteMatchingKeys(data, key, value)) {\n        deletedKeys.push({ key, value });\n    }\n});\n\n// If no keys were deleted, return an error message\nif (deletedKeys.length === 0) {\n    msg.payload = { \n        error: \"No matching key-value pairs found to delete\", \n        provided: keyValuesToDelete \n    };\n} else {\n    msg.payload = {\n        message: \"Deleted matching key-value pairs successfully\",\n        deletedKeys: deletedKeys,\n        remainingData: data\n    };\n}\n\n// Convert back to JSON string for writing to file\nmsg.payload = JSON.stringify(data, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1060,
        "wires": [
            [
                "6241b8dac0c80997"
            ]
        ]
    },
    {
        "id": "0a1e80b473a98b2e",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "DELETE  /api/datastore",
        "url": "/api/datastore",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1040,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "b57aa6dc3868a586",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "PUT  /api/datastore",
        "url": "/api/datastore",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1080,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "75474def0177999a",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "GET /api/example",
        "url": "/api/example",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1240,
        "wires": [
            [
                "388a00ce1364b1d9",
                "2d83fb40d10a0a7b"
            ]
        ]
    },
    {
        "id": "0cf39ef231d8e967",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 1260,
        "wires": [
            [
                "2e4022b01628d6cc"
            ]
        ]
    },
    {
        "id": "2e4022b01628d6cc",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "GET Response - Formaiteren + Error",
        "func": "let content;\ntry {\n    content = JSON.parse(msg.payload);\n} catch (e) {\n    content = { error: 'File not found or invalid JSON' };\n}\nmsg.payload = {\n    content: content,\n    methods: ['GET', 'POST', 'PUT','PATCH', 'DELETE']\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1260,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "6c04d3f1c1798de4",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "Send API Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1860,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e15caa133484daf5",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "POST /api/example",
        "url": "/api/example",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1320,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "225a6ed0593b23e9",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 1340,
        "wires": [
            [
                "6fd0e8b96b868629"
            ]
        ]
    },
    {
        "id": "6fd0e8b96b868629",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "POST Data - Zusammenf√ºgen -/ Erweitern",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};\n}\nlet newData = msg.req.body;\nObject.assign(existingData, newData);\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1340,
        "wires": [
            [
                "43b4a4ba906189e6"
            ]
        ]
    },
    {
        "id": "43b4a4ba906189e6",
        "type": "file",
        "z": "2bd3248bbccea26c",
        "name": "Datei √§ndern",
        "filename": "api/example.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1570,
        "y": 1300,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "50285e4fe2bef6ca",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "PATCH /api/example",
        "url": "/api/example",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1280,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "ac9acf45142f67ed",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 1380,
        "wires": [
            [
                "4b05624223847d50"
            ]
        ]
    },
    {
        "id": "6fd4787546386f7a",
        "type": "comment",
        "z": "2bd3248bbccea26c",
        "name": "JSON - Beispiel - /api/example- Abfrage Username + Passwort # Datei Bef√ºllen mit GET / PUT / POST / DELETE",
        "info": "",
        "x": 500,
        "y": 1160,
        "wires": []
    },
    {
        "id": "1a46edd2b2f4ff5d",
        "type": "file",
        "z": "2bd3248bbccea26c",
        "name": "PUT - Datei - √úberschreiben ",
        "filename": "api/example.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1600,
        "y": 1380,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "f7e4564732001dee",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "PATCH Aktuallisierung Data",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};  // Falls Datei nicht existiert oder fehlerhaft ist\n}\n\nlet newData = msg.req.body;\n\n// Funktion zum tiefen Aktualisieren von JSON-Daten (auch f√ºr verschachtelte Keys)\nfunction deepMerge(target, source) {\n    for (const key in source) {\n        if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            if (!target[key] || typeof target[key] !== 'object') {\n                target[key] = {};  // Falls das Ziel keinen passenden Key hat, wird ein Objekt erstellt\n            }\n            deepMerge(target[key], source[key]);  // Rekursive Aktualisierung\n        } else {\n            target[key] = source[key];  // Wert direkt aktualisieren\n        }\n    }\n}\n\n// Anwenden der Aktualisierung\ndeepMerge(existingData, newData);\n\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1300,
        "wires": [
            [
                "43b4a4ba906189e6"
            ]
        ]
    },
    {
        "id": "33c620a19158aaed",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 1300,
        "wires": [
            [
                "f7e4564732001dee"
            ]
        ]
    },
    {
        "id": "388a00ce1364b1d9",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "Check Authentication AUTH_KEY  in Header",
        "func": "const AUTH_KEY = \"y4eT2dgKTkAdbMCdhzSpkSuQwzPCtGtAyRxbAuq9liy-dN_iBMwCy_N_WeM3LhoFqNvQTyLXWf-MbvbkEiwbDA==\";  // Setze hier deinen API-Schl√ºssel\n\n// Pr√ºfe, ob der API-Key in den Headern vorhanden ist\nconst apiKeyHeader = msg.req.headers[\"x-auth-api-key\"];\nif (!apiKeyHeader || apiKeyHeader !== AUTH_KEY) {\n    msg.payload = { \n        error: \"Unauthorized: Missing or invalid API key\", \n        hint: \"Include 'x-auth-api-key' header with the correct API key\"\n    };\n    msg.statusCode = 401;\n    return [msg, null]; // Fehler direkt zur√ºckgeben\n}\n\n// Falls korrekt -> Weiterleitung zur n√§chsten Verarbeitung\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1240,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ],
            [
                "c3c2db4d8774d48a"
            ]
        ]
    },
    {
        "id": "c3c2db4d8774d48a",
        "type": "switch",
        "z": "2bd3248bbccea26c",
        "name": "HTTP Method Switch",
        "property": "msg.req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PATCH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PUT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 760,
        "y": 1340,
        "wires": [
            [],
            [
                "0cf39ef231d8e967"
            ],
            [
                "33c620a19158aaed"
            ],
            [
                "225a6ed0593b23e9"
            ],
            [
                "ac9acf45142f67ed"
            ],
            [
                "1a46edd2b2f4ff5d"
            ],
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "4b05624223847d50",
        "type": "function",
        "z": "2bd3248bbccea26c",
        "name": "DELETE - Keys",
        "func": "let data;\ntry {\n    data = JSON.parse(msg.payload);  // Parse existing JSON file content\n} catch (e) {\n    msg.payload = { error: \"Invalid JSON data or file not found\" };\n    return msg;\n}\n\nlet keyValuesToDelete = msg.req.body || {}; // Key-value pairs provided in the DELETE request\nlet deletedKeys = [];\n\n// Function to delete keys only if value matches (supports nested keys)\nfunction deleteMatchingKeys(obj, key, value) {\n    if (obj.hasOwnProperty(key) && obj[key] === value) {\n        delete obj[key];\n        return true;\n    }\n    for (let k in obj) {\n        if (typeof obj[k] === \"object\" && obj[k] !== null) {\n            if (deleteMatchingKeys(obj[k], key, value)) return true;\n        }\n    }\n    return false;\n}\n\n// Try deleting each key-value pair from the JSON object\nObject.entries(keyValuesToDelete).forEach(([key, value]) => {\n    if (deleteMatchingKeys(data, key, value)) {\n        deletedKeys.push({ key, value });\n    }\n});\n\n// If no keys were deleted, return an error message\nif (deletedKeys.length === 0) {\n    msg.payload = { \n        error: \"No matching key-value pairs found to delete\", \n        provided: keyValuesToDelete \n    };\n} else {\n    msg.payload = {\n        message: \"Deleted matching key-value pairs successfully\",\n        deletedKeys: deletedKeys,\n        remainingData: data\n    };\n}\n\n// Convert back to JSON string for writing to file\nmsg.payload = JSON.stringify(data, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1380,
        "wires": [
            [
                "43b4a4ba906189e6"
            ]
        ]
    },
    {
        "id": "2022da5fb6620b5c",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "DELETE /api/example",
        "url": "/api/example",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1360,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "4f17423e43c3e9c4",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "PUT  /api/example",
        "url": "/api/example",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1400,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "d008e0bf9d2c9e72",
        "type": "comment",
        "z": "2bd3248bbccea26c",
        "name": "API-KEY = y4eT2dgKTkAdbMCdhzSpkSuQwzPCtGtAyRxbAuq9liy-dN_iBMwCy_N_WeM3LhoFqNvQTyLXWf-MbvbkEiwbDA==",
        "info": "y4eT2dgKTkAdbMCdhzSpkSuQwzPCtGtAyRxbAuq9liy-dN_iBMwCy_N_WeM3LhoFqNvQTyLXWf-MbvbkEiwbDA==",
        "x": 540,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2d83fb40d10a0a7b",
        "type": "debug",
        "z": "2bd3248bbccea26c",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 1340,
        "wires": []
    },
    {
        "id": "4d7ba33b1d47ad75",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "api/speicher.json",
        "url": "api/speicher.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 580,
        "wires": [
            [
                "50fbb0f078ae1086"
            ]
        ]
    },
    {
        "id": "50fbb0f078ae1086",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 580,
        "wires": [
            [
                "fe9dc907e6953a6b"
            ]
        ]
    },
    {
        "id": "fae375580a8df9e3",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 580,
        "wires": []
    },
    {
        "id": "fe9dc907e6953a6b",
        "type": "json",
        "z": "2bd3248bbccea26c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 580,
        "wires": [
            [
                "fae375580a8df9e3"
            ]
        ]
    },
    {
        "id": "fb748195dc18f9a6",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "/api/userdata.yaml",
        "url": "/api/userdata.yaml",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "daa48d2d.58606"
            ]
        ]
    },
    {
        "id": "e4f5ef1fc10cc348",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "/api/datastore.json",
        "url": "/api/datastore.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 880,
        "wires": [
            [
                "e30fefb6ae5e3de7"
            ]
        ]
    },
    {
        "id": "e30fefb6ae5e3de7",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 880,
        "wires": [
            [
                "f33956d795c79fab"
            ]
        ]
    },
    {
        "id": "f33956d795c79fab",
        "type": "json",
        "z": "2bd3248bbccea26c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 880,
        "wires": [
            [
                "8768bdf64bb19ecf"
            ]
        ]
    },
    {
        "id": "8768bdf64bb19ecf",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 880,
        "wires": []
    },
    {
        "id": "61e02fbc2312391e",
        "type": "http in",
        "z": "2bd3248bbccea26c",
        "name": "/api/example.json",
        "url": "/api/example.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1200,
        "wires": [
            [
                "860712d2883dd074"
            ]
        ]
    },
    {
        "id": "860712d2883dd074",
        "type": "file in",
        "z": "2bd3248bbccea26c",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 1200,
        "wires": [
            [
                "9365998469832ee0"
            ]
        ]
    },
    {
        "id": "9365998469832ee0",
        "type": "json",
        "z": "2bd3248bbccea26c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 1200,
        "wires": [
            [
                "675124da322044e2"
            ]
        ]
    },
    {
        "id": "675124da322044e2",
        "type": "http response",
        "z": "2bd3248bbccea26c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 1200,
        "wires": []
    }
]