[
    {
        "id": "76a089d00ee53037",
        "type": "tab",
        "label": "HTTP - API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e4d156ef27268fa0",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "API - GET /api/state",
        "url": "/api/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "035b72d0b44f3996",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "Check Method",
        "func": "if (msg.req.method !== \"GET\") {\n    msg.statusCode = 405;\n    msg.headers = { 'Content-Type': 'application/json' };\n    msg.payload = {\n        \"error\": \"Method Not Allowed\",\n        \"allowed_method\": \"GET\",\n        \"statuscode\": 405\n    };\n    return [null, msg];  // Block further processing\n}\n\nreturn [msg, null];  // Continue processing only for GET requests\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "a8a2633dc5158cfc"
            ],
            [
                "d60ca6a9904aacd5"
            ]
        ]
    },
    {
        "id": "a8a2633dc5158cfc",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "Generate Response",
        "func": "msg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n    \"state\": \"Online\",\n    \"name\": \"Huober-API\",\n    \"datum\": new Date().toISOString(),\n    \"statuscode\": 200,\n    \"message\": \"Herzlichen gl√ºckwunsch du hast einen erfolgreichen GET - Request gesendet\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            [
                "d60ca6a9904aacd5"
            ]
        ]
    },
    {
        "id": "d60ca6a9904aacd5",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "Send Response",
        "statusCode": "",
        "headers": {},
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "c1f4a1f8d7b8",
        "type": "http in",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "GET - Error - 404 - Not-Found",
        "url": "*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1140,
        "y": 380,
        "wires": [
            [
                "a4534231f4d51faa"
            ]
        ]
    },
    {
        "id": "3e2a8a1d4561",
        "type": "http response",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "Send 404 Response",
        "statusCode": "",
        "headers": {},
        "x": 1720,
        "y": 360,
        "wires": []
    },
    {
        "id": "f1722e8dcb53d786",
        "type": "http in",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "POST - Error - 404 - Not-Found",
        "url": "*",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1150,
        "y": 420,
        "wires": [
            [
                "a4534231f4d51faa"
            ]
        ]
    },
    {
        "id": "c005f2e8cf2875e0",
        "type": "http in",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "PUT - Error - 404 - Not-Found",
        "url": "*",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "a4534231f4d51faa"
            ]
        ]
    },
    {
        "id": "7cf13facc6894be9",
        "type": "http in",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "DELETE - Error - 404 - Not-Found",
        "url": "*",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 1160,
        "y": 500,
        "wires": [
            [
                "a4534231f4d51faa"
            ]
        ]
    },
    {
        "id": "29c47c865d496743",
        "type": "http in",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "PATCH - Error - 404 - Not-Found",
        "url": "*",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "a4534231f4d51faa"
            ]
        ]
    },
    {
        "id": "a4534231f4d51faa",
        "type": "function",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "Error - Handling",
        "func": "msg.payload = {\n    \"error\": \"Resource not found\",\n    \"hilfe\": \"API = http://\" + msg.req.headers.host + \"/api\",\n    \"hilfeUI\": \"Dashboard = http://\" + msg.req.headers.host,\n    \"name\": \"Huober-API\",\n    \"datum\": new Date().toISOString(),\n    \"statuscode\": 404\n};\nmsg.statusCode = 404;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 360,
        "wires": [
            [
                "3e2a8a1d4561"
            ]
        ]
    },
    {
        "id": "eb0f974fafc5d0c0",
        "type": "comment",
        "z": "76a089d00ee53037",
        "name": "/api/state # Request GET beantworten",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "4b73344433d4fb6e",
        "type": "comment",
        "z": "76a089d00ee53037",
        "d": true,
        "name": "/api/state # Request GET beantworten",
        "info": "",
        "x": 1170,
        "y": 340,
        "wires": []
    },
    {
        "id": "d4934b0ef704732e",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "API - POST /api/state",
        "url": "/api/state",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "2ad0ddcaec26f45c",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "API - PUT /api/state",
        "url": "/api/state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "232659a4354798c0",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "API - DELETE /api/state",
        "url": "/api/state",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "abfbc03ca8a42c3c",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "API - PATCH /api/state",
        "url": "/api/state",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "035b72d0b44f3996"
            ]
        ]
    },
    {
        "id": "78862c12.e12b64",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/userdata/",
        "url": "/api/userdata/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 403,
        "wires": [
            [
                "daa48d2d.58606"
            ]
        ]
    },
    {
        "id": "daa48d2d.58606",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 350,
        "y": 400,
        "wires": [
            [
                "239bf6bc.ff85ea"
            ]
        ]
    },
    {
        "id": "3dd619a9.3d6496",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 400,
        "wires": []
    },
    {
        "id": "bc3d1a73.5b07d8",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/userdata/at_user0/",
        "url": "/api/userdata/at_user0/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 443,
        "wires": [
            [
                "0c14c7611d175a07"
            ]
        ]
    },
    {
        "id": "6aa3299b.46a838",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 867,
        "y": 437,
        "wires": []
    },
    {
        "id": "a39ea2b0.12d6e",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "GET at_user0",
        "func": "const state = msg.payload;\nvar string = JSON.stringify(state);\nvar output = JSON.parse(string)\nmsg.payload = output.at_user0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 722,
        "y": 437,
        "wires": [
            [
                "6aa3299b.46a838"
            ]
        ]
    },
    {
        "id": "239bf6bc.ff85ea",
        "type": "yaml",
        "z": "76a089d00ee53037",
        "property": "payload",
        "name": "",
        "x": 510,
        "y": 400,
        "wires": [
            [
                "3dd619a9.3d6496"
            ]
        ]
    },
    {
        "id": "eb9d312.ed1bad",
        "type": "comment",
        "z": "76a089d00ee53037",
        "name": "/api/getuseratr # Request GET beantworten",
        "info": "",
        "x": 210,
        "y": 320,
        "wires": []
    },
    {
        "id": "97f0f0a4.8fc9f",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/userdata/at_user1/",
        "url": "/api/userdata/at_user1/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 483,
        "wires": [
            [
                "e9039c5fcdbaf846"
            ]
        ]
    },
    {
        "id": "53d49f55.ab3a4",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 867,
        "y": 477,
        "wires": []
    },
    {
        "id": "67c2d2b5.33cc1c",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "GET at_user1",
        "func": "const state = msg.payload;\nvar string = JSON.stringify(state);\nvar output = JSON.parse(string)\nmsg.payload = output.at_user1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 722,
        "y": 477,
        "wires": [
            [
                "53d49f55.ab3a4"
            ]
        ]
    },
    {
        "id": "6fdaf17e.ab1a2",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/userdata/at_user2/",
        "url": "/api/userdata/at_user2/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 523,
        "wires": [
            [
                "e98012bb78ccc02a"
            ]
        ]
    },
    {
        "id": "e7eb5dfb.34328",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 867,
        "y": 517,
        "wires": []
    },
    {
        "id": "8d47135.f8c08f",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "GET at_user2",
        "func": "const state = msg.payload;\nvar string = JSON.stringify(state);\nvar output = JSON.parse(string)\nmsg.payload = output.at_user2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 722,
        "y": 517,
        "wires": [
            [
                "e7eb5dfb.34328"
            ]
        ]
    },
    {
        "id": "0c14c7611d175a07",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "3c43885b8c0e6a5d"
            ]
        ]
    },
    {
        "id": "3c43885b8c0e6a5d",
        "type": "yaml",
        "z": "76a089d00ee53037",
        "property": "payload",
        "name": "",
        "x": 510,
        "y": 440,
        "wires": [
            [
                "a39ea2b0.12d6e"
            ]
        ]
    },
    {
        "id": "e9039c5fcdbaf846",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 350,
        "y": 480,
        "wires": [
            [
                "a10e14dcb555709b"
            ]
        ]
    },
    {
        "id": "a10e14dcb555709b",
        "type": "yaml",
        "z": "76a089d00ee53037",
        "property": "payload",
        "name": "",
        "x": 510,
        "y": 480,
        "wires": [
            [
                "67c2d2b5.33cc1c"
            ]
        ]
    },
    {
        "id": "e98012bb78ccc02a",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "getuserattr",
        "filename": "api/userdata.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 350,
        "y": 520,
        "wires": [
            [
                "c57f7f1cb59e0119"
            ]
        ]
    },
    {
        "id": "c57f7f1cb59e0119",
        "type": "yaml",
        "z": "76a089d00ee53037",
        "property": "payload",
        "name": "",
        "x": 510,
        "y": 520,
        "wires": [
            [
                "8d47135.f8c08f"
            ]
        ]
    },
    {
        "id": "http_get_exfxx",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "GET /api/speicher",
        "url": "/api/speicher",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "file_read_exfxx"
            ]
        ]
    },
    {
        "id": "file_read_exfxx",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 660,
        "wires": [
            [
                "get_response_exfxx"
            ]
        ]
    },
    {
        "id": "get_response_exfxx",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "GET Response - Formaiteren + Error",
        "func": "let content;\ntry {\n    content = JSON.parse(msg.payload);\n} catch (e) {\n    content = { error: 'File not found or invalid JSON' };\n}\nmsg.payload = {\n    content: content,\n    methods: ['GET', 'POST', 'PUT','PATCH', 'DELETE']\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "http_response_exfxx"
            ]
        ]
    },
    {
        "id": "http_response_exfxx",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "Send API Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1420,
        "y": 680,
        "wires": []
    },
    {
        "id": "http_post_exfxx",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "POST /api/speicher",
        "url": "/api/speicher",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "file_read_post_exfxx"
            ]
        ]
    },
    {
        "id": "file_read_post_exfxx",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 740,
        "wires": [
            [
                "merge_post_exfxx"
            ]
        ]
    },
    {
        "id": "merge_post_exfxx",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data - Zusammenf√ºgen -/ Erweitern",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};\n}\nlet newData = msg.req.body;\nObject.assign(existingData, newData);\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 740,
        "wires": [
            [
                "file_write_exfxx"
            ]
        ]
    },
    {
        "id": "file_write_exfxx",
        "type": "file",
        "z": "76a089d00ee53037",
        "name": "Datei √§ndern",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1090,
        "y": 700,
        "wires": [
            [
                "http_response_exfxx"
            ]
        ]
    },
    {
        "id": "http_put_exfxx",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "PATCH /api/speicher",
        "url": "/api/speicher",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "9e0aab5d84bbdb8b"
            ]
        ]
    },
    {
        "id": "http_delete_exfxx",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "DELETE  /api/speicher",
        "url": "/api/speicher",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "file_read_delete_exfxx"
            ]
        ]
    },
    {
        "id": "file_read_delete_exfxx",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 780,
        "wires": [
            [
                "delete_keys_exfxx"
            ]
        ]
    },
    {
        "id": "delete_keys_exfxx",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "DELETE - Keys",
        "func": "let data;\ntry {\n    data = JSON.parse(msg.payload);  // Parse existing JSON file content\n} catch (e) {\n    msg.payload = { error: \"Invalid JSON data or file not found\" };\n    return msg;\n}\n\nlet keyValuesToDelete = msg.req.body || {}; // Key-value pairs provided in the DELETE request\nlet deletedKeys = [];\n\n// Function to delete keys only if value matches (supports nested keys)\nfunction deleteMatchingKeys(obj, key, value) {\n    if (obj.hasOwnProperty(key) && obj[key] === value) {\n        delete obj[key];\n        return true;\n    }\n    for (let k in obj) {\n        if (typeof obj[k] === \"object\" && obj[k] !== null) {\n            if (deleteMatchingKeys(obj[k], key, value)) return true;\n        }\n    }\n    return false;\n}\n\n// Try deleting each key-value pair from the JSON object\nObject.entries(keyValuesToDelete).forEach(([key, value]) => {\n    if (deleteMatchingKeys(data, key, value)) {\n        deletedKeys.push({ key, value });\n    }\n});\n\n// If no keys were deleted, return an error message\nif (deletedKeys.length === 0) {\n    msg.payload = { \n        error: \"No matching key-value pairs found to delete\", \n        provided: keyValuesToDelete \n    };\n} else {\n    msg.payload = {\n        message: \"Deleted matching key-value pairs successfully\",\n        deletedKeys: deletedKeys,\n        remainingData: data\n    };\n}\n\n// Convert back to JSON string for writing to file\nmsg.payload = JSON.stringify(data, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 780,
        "wires": [
            [
                "file_write_exfxx"
            ]
        ]
    },
    {
        "id": "45220dd0f3abd20a",
        "type": "comment",
        "z": "76a089d00ee53037",
        "name": "JSON - File /api/speicher# Datei Bef√ºllen mit GET / PUT / POST / DELETE",
        "info": "",
        "x": 300,
        "y": 580,
        "wires": []
    },
    {
        "id": "4d2a2d1962fb7f0b",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "PUT  /api/speicher",
        "url": "/api/speicher",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "549d379521656ea2"
            ]
        ]
    },
    {
        "id": "549d379521656ea2",
        "type": "file",
        "z": "76a089d00ee53037",
        "name": "PUT - Datei - √úberschreiben ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1140,
        "y": 820,
        "wires": [
            [
                "http_response_exfxx"
            ]
        ]
    },
    {
        "id": "33b6d654be09d368",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "PATCH Aktuallisierung Data",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};  // Falls Datei nicht existiert oder fehlerhaft ist\n}\n\nlet newData = msg.req.body;\n\n// Funktion zum tiefen Aktualisieren von JSON-Daten (auch f√ºr verschachtelte Keys)\nfunction deepMerge(target, source) {\n    for (const key in source) {\n        if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            if (!target[key] || typeof target[key] !== 'object') {\n                target[key] = {};  // Falls das Ziel keinen passenden Key hat, wird ein Objekt erstellt\n            }\n            deepMerge(target[key], source[key]);  // Rekursive Aktualisierung\n        } else {\n            target[key] = source[key];  // Wert direkt aktualisieren\n        }\n    }\n}\n\n// Anwenden der Aktualisierung\ndeepMerge(existingData, newData);\n\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 700,
        "wires": [
            [
                "file_write_exfxx"
            ]
        ]
    },
    {
        "id": "9e0aab5d84bbdb8b",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 700,
        "wires": [
            [
                "33b6d654be09d368"
            ]
        ]
    },
    {
        "id": "bf710e86a087c541",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "GET /api/datastore",
        "url": "/api/datastore",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 960,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "9af166fba403fdfc",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 980,
        "wires": [
            [
                "496826c89ddfc82c"
            ]
        ]
    },
    {
        "id": "496826c89ddfc82c",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "GET Response - Formaiteren + Error",
        "func": "let content;\ntry {\n    content = JSON.parse(msg.payload);\n} catch (e) {\n    content = { error: 'File not found or invalid JSON' };\n}\nmsg.payload = {\n    content: content,\n    methods: ['GET', 'POST', 'PUT','PATCH', 'DELETE']\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 980,
        "wires": [
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "2d40231ce057796b",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "Send API Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1780,
        "y": 960,
        "wires": []
    },
    {
        "id": "a33b04247d501c2d",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "POST /api/datastore",
        "url": "/api/datastore",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "8905cfebcb0fa700",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1060,
        "wires": [
            [
                "eea17eb941afb3a1"
            ]
        ]
    },
    {
        "id": "eea17eb941afb3a1",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data - Zusammenf√ºgen -/ Erweitern",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};\n}\nlet newData = msg.req.body;\nObject.assign(existingData, newData);\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1060,
        "wires": [
            [
                "6241b8dac0c80997"
            ]
        ]
    },
    {
        "id": "6241b8dac0c80997",
        "type": "file",
        "z": "76a089d00ee53037",
        "name": "Datei √§ndern",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1490,
        "y": 1020,
        "wires": [
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "c02b9d3a2f46d922",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "PATCH /api/datastore",
        "url": "/api/datastore",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1000,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "b835b06d29344b94",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1100,
        "wires": [
            [
                "5697d9dd39d0844e"
            ]
        ]
    },
    {
        "id": "a3a840e619d0fc4b",
        "type": "comment",
        "z": "76a089d00ee53037",
        "name": "JSON - File /api/datastore - Abfrage Username + Passwort # Datei Bef√ºllen mit GET / PUT / POST / DELETE",
        "info": "",
        "x": 410,
        "y": 880,
        "wires": []
    },
    {
        "id": "ba987fe826211fbf",
        "type": "file",
        "z": "76a089d00ee53037",
        "name": "PUT - Datei - √úberschreiben ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1520,
        "y": 1100,
        "wires": [
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "b57449c8c1b3d058",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "PATCH Aktuallisierung Data",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};  // Falls Datei nicht existiert oder fehlerhaft ist\n}\n\nlet newData = msg.req.body;\n\n// Funktion zum tiefen Aktualisieren von JSON-Daten (auch f√ºr verschachtelte Keys)\nfunction deepMerge(target, source) {\n    for (const key in source) {\n        if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            if (!target[key] || typeof target[key] !== 'object') {\n                target[key] = {};  // Falls das Ziel keinen passenden Key hat, wird ein Objekt erstellt\n            }\n            deepMerge(target[key], source[key]);  // Rekursive Aktualisierung\n        } else {\n            target[key] = source[key];  // Wert direkt aktualisieren\n        }\n    }\n}\n\n// Anwenden der Aktualisierung\ndeepMerge(existingData, newData);\n\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1020,
        "wires": [
            [
                "6241b8dac0c80997"
            ]
        ]
    },
    {
        "id": "712e6a1344626452",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "b57449c8c1b3d058"
            ]
        ]
    },
    {
        "id": "ac8151d6f73635a0",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "Check Authentication .\\admin / ET!admin1",
        "func": "const AUTH = { username: \"admin\", password: \"ET!admin1\" };\n\n// Pr√ºfe, ob Authentifizierung vorhanden ist\nconst authHeader = msg.req.headers.authorization;\nif (!authHeader || !authHeader.startsWith(\"Basic \")) {\n    msg.payload = { \n        error: \"Unauthorized: Missing authentication\", \n        hint: \"Use Basic Authentication with username/password\"\n    };\n    msg.statusCode = 401;\n    return [msg, null]; // Fehler direkt zur√ºckgeben\n}\n\n// Dekodieren von Base64 (Format: \"username:password\")\nconst base64Credentials = authHeader.split(\" \")[1];\nconst credentials = Buffer.from(base64Credentials, \"base64\").toString(\"utf-8\").split(\":\");\nconst username = credentials[0];\nconst password = credentials[1];\n\n// Pr√ºfe Benutzername & Passwort\nif (username !== AUTH.username || password !== AUTH.password) {\n    msg.payload = { \n        error: \"Unauthorized: Invalid username or password\", \n        hint: \"Check endpoint /api/userdata\"\n    };\n    msg.statusCode = 403;\n    return [msg, null]; // Fehler direkt zur√ºckgeben\n}\n\n// Falls korrekt -> Weiterleitung zur n√§chsten Verarbeitung\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 960,
        "wires": [
            [
                "2d40231ce057796b"
            ],
            [
                "switch_http_methods"
            ]
        ]
    },
    {
        "id": "switch_http_methods",
        "type": "switch",
        "z": "76a089d00ee53037",
        "name": "HTTP Method Switch",
        "property": "msg.req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PATCH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PUT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 680,
        "y": 1060,
        "wires": [
            [],
            [
                "9af166fba403fdfc"
            ],
            [
                "712e6a1344626452"
            ],
            [
                "8905cfebcb0fa700"
            ],
            [
                "b835b06d29344b94"
            ],
            [
                "ba987fe826211fbf"
            ],
            [
                "2d40231ce057796b"
            ]
        ]
    },
    {
        "id": "5697d9dd39d0844e",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "DELETE - Keys",
        "func": "let data;\ntry {\n    data = JSON.parse(msg.payload);  // Parse existing JSON file content\n} catch (e) {\n    msg.payload = { error: \"Invalid JSON data or file not found\" };\n    return msg;\n}\n\nlet keyValuesToDelete = msg.req.body || {}; // Key-value pairs provided in the DELETE request\nlet deletedKeys = [];\n\n// Function to delete keys only if value matches (supports nested keys)\nfunction deleteMatchingKeys(obj, key, value) {\n    if (obj.hasOwnProperty(key) && obj[key] === value) {\n        delete obj[key];\n        return true;\n    }\n    for (let k in obj) {\n        if (typeof obj[k] === \"object\" && obj[k] !== null) {\n            if (deleteMatchingKeys(obj[k], key, value)) return true;\n        }\n    }\n    return false;\n}\n\n// Try deleting each key-value pair from the JSON object\nObject.entries(keyValuesToDelete).forEach(([key, value]) => {\n    if (deleteMatchingKeys(data, key, value)) {\n        deletedKeys.push({ key, value });\n    }\n});\n\n// If no keys were deleted, return an error message\nif (deletedKeys.length === 0) {\n    msg.payload = { \n        error: \"No matching key-value pairs found to delete\", \n        provided: keyValuesToDelete \n    };\n} else {\n    msg.payload = {\n        message: \"Deleted matching key-value pairs successfully\",\n        deletedKeys: deletedKeys,\n        remainingData: data\n    };\n}\n\n// Convert back to JSON string for writing to file\nmsg.payload = JSON.stringify(data, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1100,
        "wires": [
            [
                "6241b8dac0c80997"
            ]
        ]
    },
    {
        "id": "0a1e80b473a98b2e",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "DELETE  /api/datastore",
        "url": "/api/datastore",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1080,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "b57aa6dc3868a586",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "PUT  /api/datastore",
        "url": "/api/datastore",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "ac8151d6f73635a0"
            ]
        ]
    },
    {
        "id": "75474def0177999a",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "GET /api/example",
        "url": "/api/example",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "388a00ce1364b1d9",
                "2d83fb40d10a0a7b"
            ]
        ]
    },
    {
        "id": "0cf39ef231d8e967",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1300,
        "wires": [
            [
                "2e4022b01628d6cc"
            ]
        ]
    },
    {
        "id": "2e4022b01628d6cc",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "GET Response - Formaiteren + Error",
        "func": "let content;\ntry {\n    content = JSON.parse(msg.payload);\n} catch (e) {\n    content = { error: 'File not found or invalid JSON' };\n}\nmsg.payload = {\n    content: content,\n    methods: ['GET', 'POST', 'PUT','PATCH', 'DELETE']\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1300,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "6c04d3f1c1798de4",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "Send API Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1780,
        "y": 1280,
        "wires": []
    },
    {
        "id": "e15caa133484daf5",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "POST /api/example",
        "url": "/api/example",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1360,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "225a6ed0593b23e9",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1380,
        "wires": [
            [
                "6fd0e8b96b868629"
            ]
        ]
    },
    {
        "id": "6fd0e8b96b868629",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data - Zusammenf√ºgen -/ Erweitern",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};\n}\nlet newData = msg.req.body;\nObject.assign(existingData, newData);\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1380,
        "wires": [
            [
                "43b4a4ba906189e6"
            ]
        ]
    },
    {
        "id": "43b4a4ba906189e6",
        "type": "file",
        "z": "76a089d00ee53037",
        "name": "Datei √§ndern",
        "filename": "api/example.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1490,
        "y": 1340,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "50285e4fe2bef6ca",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "PATCH /api/example",
        "url": "/api/example",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "ac9acf45142f67ed",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1420,
        "wires": [
            [
                "4b05624223847d50"
            ]
        ]
    },
    {
        "id": "6fd4787546386f7a",
        "type": "comment",
        "z": "76a089d00ee53037",
        "name": "JSON - Beispiel - Lehrer /api/example- Abfrage: x-auth-api-key # Datei Bef√ºllen mit GET / PUT / POST / DELETE",
        "info": "",
        "x": 420,
        "y": 1200,
        "wires": []
    },
    {
        "id": "1a46edd2b2f4ff5d",
        "type": "file",
        "z": "76a089d00ee53037",
        "name": "PUT - Datei - √úberschreiben ",
        "filename": "api/example.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1520,
        "y": 1420,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "f7e4564732001dee",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "PATCH Aktuallisierung Data",
        "func": "let existingData;\ntry {\n    existingData = JSON.parse(msg.payload);\n} catch (e) {\n    existingData = {};  // Falls Datei nicht existiert oder fehlerhaft ist\n}\n\nlet newData = msg.req.body;\n\n// Funktion zum tiefen Aktualisieren von JSON-Daten (auch f√ºr verschachtelte Keys)\nfunction deepMerge(target, source) {\n    for (const key in source) {\n        if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            if (!target[key] || typeof target[key] !== 'object') {\n                target[key] = {};  // Falls das Ziel keinen passenden Key hat, wird ein Objekt erstellt\n            }\n            deepMerge(target[key], source[key]);  // Rekursive Aktualisierung\n        } else {\n            target[key] = source[key];  // Wert direkt aktualisieren\n        }\n    }\n}\n\n// Anwenden der Aktualisierung\ndeepMerge(existingData, newData);\n\nmsg.payload = JSON.stringify(existingData, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1340,
        "wires": [
            [
                "43b4a4ba906189e6"
            ]
        ]
    },
    {
        "id": "33c620a19158aaed",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1340,
        "wires": [
            [
                "f7e4564732001dee"
            ]
        ]
    },
    {
        "id": "388a00ce1364b1d9",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "Check Authentication AUTH_KEY  in Header",
        "func": "const AUTH_KEY = \"y4eT2dgKTkAdbMCdhzSpkSuQwzPCtGtAyRxbAuq9liy-dN_iBMwCy_N_WeM3LhoFqNvQTyLXWf-MbvbkEiwbDA==\";  // Setze hier deinen API-Schl√ºssel\n\n// Pr√ºfe, ob der API-Key in den Headern vorhanden ist\nconst apiKeyHeader = msg.req.headers[\"x-auth-api-key\"];\nif (!apiKeyHeader || apiKeyHeader !== AUTH_KEY) {\n    msg.payload = { \n        error: \"Unauthorized: Missing or invalid API key\", \n        hint: \"Include 'x-auth-api-key' header with the correct API key\"\n    };\n    msg.statusCode = 401;\n    return [msg, null]; // Fehler direkt zur√ºckgeben\n}\n\n// Falls korrekt -> Weiterleitung zur n√§chsten Verarbeitung\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1280,
        "wires": [
            [
                "6c04d3f1c1798de4"
            ],
            [
                "c3c2db4d8774d48a"
            ]
        ]
    },
    {
        "id": "c3c2db4d8774d48a",
        "type": "switch",
        "z": "76a089d00ee53037",
        "name": "HTTP Method Switch",
        "property": "msg.req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PATCH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PUT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 680,
        "y": 1380,
        "wires": [
            [],
            [
                "0cf39ef231d8e967"
            ],
            [
                "33c620a19158aaed"
            ],
            [
                "225a6ed0593b23e9"
            ],
            [
                "ac9acf45142f67ed"
            ],
            [
                "1a46edd2b2f4ff5d"
            ],
            [
                "6c04d3f1c1798de4"
            ]
        ]
    },
    {
        "id": "4b05624223847d50",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "DELETE - Keys",
        "func": "let data;\ntry {\n    data = JSON.parse(msg.payload);  // Parse existing JSON file content\n} catch (e) {\n    msg.payload = { error: \"Invalid JSON data or file not found\" };\n    return msg;\n}\n\nlet keyValuesToDelete = msg.req.body || {}; // Key-value pairs provided in the DELETE request\nlet deletedKeys = [];\n\n// Function to delete keys only if value matches (supports nested keys)\nfunction deleteMatchingKeys(obj, key, value) {\n    if (obj.hasOwnProperty(key) && obj[key] === value) {\n        delete obj[key];\n        return true;\n    }\n    for (let k in obj) {\n        if (typeof obj[k] === \"object\" && obj[k] !== null) {\n            if (deleteMatchingKeys(obj[k], key, value)) return true;\n        }\n    }\n    return false;\n}\n\n// Try deleting each key-value pair from the JSON object\nObject.entries(keyValuesToDelete).forEach(([key, value]) => {\n    if (deleteMatchingKeys(data, key, value)) {\n        deletedKeys.push({ key, value });\n    }\n});\n\n// If no keys were deleted, return an error message\nif (deletedKeys.length === 0) {\n    msg.payload = { \n        error: \"No matching key-value pairs found to delete\", \n        provided: keyValuesToDelete \n    };\n} else {\n    msg.payload = {\n        message: \"Deleted matching key-value pairs successfully\",\n        deletedKeys: deletedKeys,\n        remainingData: data\n    };\n}\n\n// Convert back to JSON string for writing to file\nmsg.payload = JSON.stringify(data, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1420,
        "wires": [
            [
                "43b4a4ba906189e6"
            ]
        ]
    },
    {
        "id": "2022da5fb6620b5c",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "DELETE /api/example",
        "url": "/api/example",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "4f17423e43c3e9c4",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "PUT  /api/example",
        "url": "/api/example",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1440,
        "wires": [
            [
                "388a00ce1364b1d9"
            ]
        ]
    },
    {
        "id": "d008e0bf9d2c9e72",
        "type": "comment",
        "z": "76a089d00ee53037",
        "name": "API-KEY = y4eT2dgKTkAdbMCdhzSpkSuQwzPCtGtAyRxbAuq9liy-dN_iBMwCy_N_WeM3LhoFqNvQTyLXWf-MbvbkEiwbDA==",
        "info": "y4eT2dgKTkAdbMCdhzSpkSuQwzPCtGtAyRxbAuq9liy-dN_iBMwCy_N_WeM3LhoFqNvQTyLXWf-MbvbkEiwbDA==",
        "x": 460,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2d83fb40d10a0a7b",
        "type": "debug",
        "z": "76a089d00ee53037",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1380,
        "wires": []
    },
    {
        "id": "4d7ba33b1d47ad75",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "api/speicher.json",
        "url": "api/speicher.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "50fbb0f078ae1086"
            ]
        ]
    },
    {
        "id": "50fbb0f078ae1086",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/speicher.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 620,
        "wires": [
            [
                "fe9dc907e6953a6b"
            ]
        ]
    },
    {
        "id": "fae375580a8df9e3",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 620,
        "wires": []
    },
    {
        "id": "fe9dc907e6953a6b",
        "type": "json",
        "z": "76a089d00ee53037",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 620,
        "wires": [
            [
                "fae375580a8df9e3"
            ]
        ]
    },
    {
        "id": "fb748195dc18f9a6",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/userdata.yaml",
        "url": "/api/userdata.yaml",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "daa48d2d.58606"
            ]
        ]
    },
    {
        "id": "e4f5ef1fc10cc348",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/datastore.json",
        "url": "/api/datastore.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "e30fefb6ae5e3de7"
            ]
        ]
    },
    {
        "id": "e30fefb6ae5e3de7",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/datastore.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 920,
        "wires": [
            [
                "f33956d795c79fab"
            ]
        ]
    },
    {
        "id": "f33956d795c79fab",
        "type": "json",
        "z": "76a089d00ee53037",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 920,
        "wires": [
            [
                "8768bdf64bb19ecf"
            ]
        ]
    },
    {
        "id": "8768bdf64bb19ecf",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "61e02fbc2312391e",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/example.json",
        "url": "/api/example.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1240,
        "wires": [
            [
                "860712d2883dd074"
            ]
        ]
    },
    {
        "id": "860712d2883dd074",
        "type": "file in",
        "z": "76a089d00ee53037",
        "name": "Lesen um Dateiinhalt ",
        "filename": "api/example.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "9365998469832ee0"
            ]
        ]
    },
    {
        "id": "9365998469832ee0",
        "type": "json",
        "z": "76a089d00ee53037",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 1240,
        "wires": [
            [
                "675124da322044e2"
            ]
        ]
    },
    {
        "id": "675124da322044e2",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9fdfd2e2c530bc3f",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/1a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 1760,
        "wires": [
            [
                "bbb9f1eef6711f1f"
            ]
        ]
    },
    {
        "id": "bb9897892259309f",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 1a",
        "order": 3,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/1a</div>\n    <div id=\"box1a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box1a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box1a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box1a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "bbb9f1eef6711f1f",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1760,
        "wires": [
            [
                "bb9897892259309f"
            ]
        ]
    },
    {
        "id": "848f647f6e6ec7d6",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/2a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 1880,
        "wires": [
            [
                "7f231232c83af2ae"
            ]
        ]
    },
    {
        "id": "7f7972b6a1999d47",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 2a",
        "order": 3,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/2a</div>\n    <div id=\"box2a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box2a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box2a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box2a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "7f231232c83af2ae",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1880,
        "wires": [
            [
                "7f7972b6a1999d47"
            ]
        ]
    },
    {
        "id": "9dcae1a70da0a7d3",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/3a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2000,
        "wires": [
            [
                "46dfdb1dc0c1cc23"
            ]
        ]
    },
    {
        "id": "fb3ad8f8a1792a2f",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 3a",
        "order": 2,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/3a</div>\n    <div id=\"box3a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box3a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box3a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box3a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "46dfdb1dc0c1cc23",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2000,
        "wires": [
            [
                "fb3ad8f8a1792a2f"
            ]
        ]
    },
    {
        "id": "da621c8007d4b80d",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/4a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2100,
        "wires": [
            [
                "6dc40fd3bd351cc7"
            ]
        ]
    },
    {
        "id": "ee3d90c2ccc70c2f",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 4a",
        "order": 2,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/4a</div>\n    <div id=\"box4a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box4a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box4a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box4a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "6dc40fd3bd351cc7",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2100,
        "wires": [
            [
                "ee3d90c2ccc70c2f"
            ]
        ]
    },
    {
        "id": "de10b329f11b2115",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/5a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2220,
        "wires": [
            [
                "a796558066e5f3d7"
            ]
        ]
    },
    {
        "id": "2b93bd45626497e8",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 5a",
        "order": 5,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/5a</div>\n    <div id=\"box5a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box5a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box5a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box5a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "a796558066e5f3d7",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2220,
        "wires": [
            [
                "2b93bd45626497e8"
            ]
        ]
    },
    {
        "id": "4ab4637cd2278862",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/6a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2320,
        "wires": [
            [
                "7a8bae25179c75c9"
            ]
        ]
    },
    {
        "id": "60781b24f527eed8",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 6a",
        "order": 5,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/6a</div>\n    <div id=\"box6a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box6a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box6a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box6a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "7a8bae25179c75c9",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2320,
        "wires": [
            [
                "60781b24f527eed8"
            ]
        ]
    },
    {
        "id": "d6b81067dc48b395",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/7a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2440,
        "wires": [
            [
                "1e690e9d6e1aeaed"
            ]
        ]
    },
    {
        "id": "8c0e5b4c658be729",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 7a",
        "order": 4,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/7a</div>\n    <div id=\"box7a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box7a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box7a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box7a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "1e690e9d6e1aeaed",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2440,
        "wires": [
            [
                "8c0e5b4c658be729"
            ]
        ]
    },
    {
        "id": "4da18b488342f6bb",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/8a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2580,
        "wires": [
            [
                "918588d48b9b89a0"
            ]
        ]
    },
    {
        "id": "c86bc21728af453c",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 8a",
        "order": 4,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/8a</div>\n    <div id=\"box8a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box8a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box8a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box8a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "918588d48b9b89a0",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2580,
        "wires": [
            [
                "c86bc21728af453c"
            ]
        ]
    },
    {
        "id": "01742d5a45fce85f",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/9a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2700,
        "wires": [
            [
                "b791d750db71c791"
            ]
        ]
    },
    {
        "id": "1ac6cfecf5a0af6e",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 9a",
        "order": 7,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/9a</div>\n    <div id=\"box9a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box9a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box9a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box9a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "b791d750db71c791",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2700,
        "wires": [
            [
                "1ac6cfecf5a0af6e"
            ]
        ]
    },
    {
        "id": "311ec3442382e677",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/10a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2820,
        "wires": [
            [
                "420de54c2e40688e"
            ]
        ]
    },
    {
        "id": "cd16da3d45f5f86e",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 10a",
        "order": 7,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/10a</div>\n    <div id=\"box10a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box10a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box10a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box10a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "420de54c2e40688e",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2820,
        "wires": [
            [
                "cd16da3d45f5f86e"
            ]
        ]
    },
    {
        "id": "099d220443bc3364",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/11a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 2920,
        "wires": [
            [
                "bc5f78e3d5ad3448"
            ]
        ]
    },
    {
        "id": "8d6958ee32ae867b",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 11a",
        "order": 7,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/11a</div>\n    <div id=\"box11a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box11a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box11a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box11a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "bc5f78e3d5ad3448",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 2920,
        "wires": [
            [
                "8d6958ee32ae867b"
            ]
        ]
    },
    {
        "id": "2660e85b3667844d",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/12a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 3040,
        "wires": [
            [
                "e37861352ba75faf"
            ]
        ]
    },
    {
        "id": "6533fad2dae54c6e",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 12a",
        "order": 7,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/12a</div>\n    <div id=\"box12a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box12a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box12a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box12a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "e37861352ba75faf",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 3040,
        "wires": [
            [
                "6533fad2dae54c6e"
            ]
        ]
    },
    {
        "id": "a5ed260e5f561403",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/13a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 3160,
        "wires": [
            [
                "0883e66f6a7b4639"
            ]
        ]
    },
    {
        "id": "62cdf045ea439722",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 13a",
        "order": 9,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/13a</div>\n    <div id=\"box13a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box13a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box13a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box13a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "0883e66f6a7b4639",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 3160,
        "wires": [
            [
                "62cdf045ea439722"
            ]
        ]
    },
    {
        "id": "b30eb671c5dc67ca",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/14a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 3280,
        "wires": [
            [
                "1b16e850359fcf57"
            ]
        ]
    },
    {
        "id": "89411af98a6ab281",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 14a",
        "order": 9,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/14a</div>\n    <div id=\"box14a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box14a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box14a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box14a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 3280,
        "wires": [
            []
        ]
    },
    {
        "id": "1b16e850359fcf57",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 3280,
        "wires": [
            [
                "89411af98a6ab281"
            ]
        ]
    },
    {
        "id": "7aaf988ee881e260",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/15a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 3400,
        "wires": [
            [
                "6924e8cb9053a304"
            ]
        ]
    },
    {
        "id": "d1f34e95464c7f75",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 15a",
        "order": 9,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/15a</div>\n    <div id=\"box15a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box15a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box15a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box15a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 3400,
        "wires": [
            []
        ]
    },
    {
        "id": "6924e8cb9053a304",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 3400,
        "wires": [
            [
                "d1f34e95464c7f75"
            ]
        ]
    },
    {
        "id": "76a855b161e91e38",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/16a",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 3520,
        "wires": [
            [
                "3318902d47acb0e2"
            ]
        ]
    },
    {
        "id": "3364ad1c4286d403",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 16a",
        "order": 9,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/16a</div>\n    <div id=\"box16a\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box16a').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box16a').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box16a').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "3318902d47acb0e2",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 3520,
        "wires": [
            [
                "3364ad1c4286d403"
            ]
        ]
    },
    {
        "id": "7fa803cbc7efaca8",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/1b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 1760,
        "wires": [
            [
                "7f22b07f1a74948e"
            ]
        ]
    },
    {
        "id": "ff9c561fc920463d",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 1b",
        "order": 4,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/1b</div>\n    <div id=\"box1b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box1b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box1b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box1b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "7f22b07f1a74948e",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 1760,
        "wires": [
            [
                "ff9c561fc920463d"
            ]
        ]
    },
    {
        "id": "270b922dc6f8a01e",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/2b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 1880,
        "wires": [
            [
                "26983e720e1262a4"
            ]
        ]
    },
    {
        "id": "c154d0711ebdc2b8",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 2b",
        "order": 4,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/2b</div>\n    <div id=\"box2b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box2b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box2b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box2b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "26983e720e1262a4",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 1880,
        "wires": [
            [
                "c154d0711ebdc2b8"
            ]
        ]
    },
    {
        "id": "7d73bd3894f8a944",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/3b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2000,
        "wires": [
            [
                "36a42a9946080ce7"
            ]
        ]
    },
    {
        "id": "c09cea6fbaf0eff9",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 3b",
        "order": 3,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/3b</div>\n    <div id=\"box3b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box3b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box3b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box3b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "36a42a9946080ce7",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2000,
        "wires": [
            [
                "c09cea6fbaf0eff9"
            ]
        ]
    },
    {
        "id": "d0cd710a1f795975",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/4b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2100,
        "wires": [
            [
                "3b9b83c9e8a1a101"
            ]
        ]
    },
    {
        "id": "d56d33a45e7f6783",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 4b",
        "order": 3,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/4b</div>\n    <div id=\"box4b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box4b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box4b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box4b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "3b9b83c9e8a1a101",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2100,
        "wires": [
            [
                "d56d33a45e7f6783"
            ]
        ]
    },
    {
        "id": "c6f64ed7b470e6a4",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/5b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2220,
        "wires": [
            [
                "561a504aec37a48e"
            ]
        ]
    },
    {
        "id": "600b91d72d368cc6",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 5b",
        "order": 6,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/5b</div>\n    <div id=\"box5b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box5b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box5b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box5b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "561a504aec37a48e",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2220,
        "wires": [
            [
                "600b91d72d368cc6"
            ]
        ]
    },
    {
        "id": "8ac0fbba32f8bb99",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/6b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2320,
        "wires": [
            [
                "3d557cc3431b8371"
            ]
        ]
    },
    {
        "id": "953a2821f1033e81",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 6b",
        "order": 6,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/6b</div>\n    <div id=\"box6b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box6b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box6b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box6b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "3d557cc3431b8371",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2320,
        "wires": [
            [
                "953a2821f1033e81"
            ]
        ]
    },
    {
        "id": "efd8526a67fa77de",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/7b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2440,
        "wires": [
            [
                "96bcdb12e9140576"
            ]
        ]
    },
    {
        "id": "fcd25623c25c2e2b",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 7b",
        "order": 5,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/7b</div>\n    <div id=\"box7b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box7b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box7b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box7b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "96bcdb12e9140576",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2440,
        "wires": [
            [
                "fcd25623c25c2e2b"
            ]
        ]
    },
    {
        "id": "828602d63854c405",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/8b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2580,
        "wires": [
            [
                "832b81d750ef2cee"
            ]
        ]
    },
    {
        "id": "fc6666e00ddf1e44",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 8b",
        "order": 5,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/8b</div>\n    <div id=\"box8b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box8b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box8b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box8b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "832b81d750ef2cee",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2580,
        "wires": [
            [
                "fc6666e00ddf1e44"
            ]
        ]
    },
    {
        "id": "29c5f23e3369c725",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/9b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2700,
        "wires": [
            [
                "9897b344ec70d2d0"
            ]
        ]
    },
    {
        "id": "1d6532f793caeff0",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 9b",
        "order": 8,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/9b</div>\n    <div id=\"box9b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box9b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box9b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box9b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "9897b344ec70d2d0",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2700,
        "wires": [
            [
                "1d6532f793caeff0"
            ]
        ]
    },
    {
        "id": "4cbae6c2ae26cad3",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/10b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2820,
        "wires": [
            [
                "7d35a3a274a14f26"
            ]
        ]
    },
    {
        "id": "d7a71041b0f9c76d",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 10b",
        "order": 8,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/10b</div>\n    <div id=\"box10b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box10b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box10b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box10b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "7d35a3a274a14f26",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2820,
        "wires": [
            [
                "d7a71041b0f9c76d"
            ]
        ]
    },
    {
        "id": "f796f8b51bf6129f",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/11b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 2920,
        "wires": [
            [
                "0a935a9c25db891c"
            ]
        ]
    },
    {
        "id": "18a5b4c919c45148",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 11b",
        "order": 8,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/11b</div>\n    <div id=\"box11b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box11b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box11b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box11b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "0a935a9c25db891c",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 2920,
        "wires": [
            [
                "18a5b4c919c45148"
            ]
        ]
    },
    {
        "id": "d2e427accedc3b6e",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/12b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 3040,
        "wires": [
            [
                "75cd0427b89ac4c2"
            ]
        ]
    },
    {
        "id": "964e6b6e5892def4",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 12b",
        "order": 8,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/12b</div>\n    <div id=\"box12b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box12b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box12b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box12b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "75cd0427b89ac4c2",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 3040,
        "wires": [
            [
                "964e6b6e5892def4"
            ]
        ]
    },
    {
        "id": "82e271ea65f9580c",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/13b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 3160,
        "wires": [
            [
                "0b9aed2b1f10f732"
            ]
        ]
    },
    {
        "id": "c80df256763a1da7",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz 13b",
        "order": 10,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/13b</div>\n    <div id=\"box13b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box13b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box13b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box13b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "0b9aed2b1f10f732",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 3160,
        "wires": [
            [
                "c80df256763a1da7"
            ]
        ]
    },
    {
        "id": "78fdb9a3b2a647de",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/14b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 3280,
        "wires": [
            [
                "6f245aed72ce0374"
            ]
        ]
    },
    {
        "id": "abf4e5f11f89a6ad",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz 14b",
        "order": 10,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/14b</div>\n    <div id=\"box14b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box14b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box14b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box14b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 3280,
        "wires": [
            []
        ]
    },
    {
        "id": "6f245aed72ce0374",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 3280,
        "wires": [
            [
                "abf4e5f11f89a6ad"
            ]
        ]
    },
    {
        "id": "5a2b776151b708c9",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/15b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 3400,
        "wires": [
            [
                "8b1b37c8b6453165"
            ]
        ]
    },
    {
        "id": "b16df6626f7cb80c",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "name": "Platz 15b",
        "order": 10,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/15b</div>\n    <div id=\"box15b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box15b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box15b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box15b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 3400,
        "wires": [
            []
        ]
    },
    {
        "id": "8b1b37c8b6453165",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 3400,
        "wires": [
            [
                "b16df6626f7cb80c"
            ]
        ]
    },
    {
        "id": "7626151ce6bad58f",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/16b",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 3520,
        "wires": [
            [
                "1f31f84b490e29c2"
            ]
        ]
    },
    {
        "id": "8705c69cc9ba6cdb",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "name": "Platz 16b",
        "order": 10,
        "width": 3,
        "height": 2,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">platz/16b</div>\n    <div id=\"box16b\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('box16b').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('box16b').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('box16b').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "1f31f84b490e29c2",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 3520,
        "wires": [
            [
                "8705c69cc9ba6cdb"
            ]
        ]
    },
    {
        "id": "6454ac26fe4cb4ad",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/lula",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 1640,
        "wires": [
            [
                "b28786a9a9cc6fb4"
            ]
        ]
    },
    {
        "id": "7aeee84e84befd00",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "name": "Platz LehrerA",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">Lehrer-A</div>\n    <div id=\"boxlula\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('boxlula').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('boxlula').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('boxlula').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "b28786a9a9cc6fb4",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1640,
        "wires": [
            [
                "7aeee84e84befd00"
            ]
        ]
    },
    {
        "id": "23a08fc6d498f3d3",
        "type": "mqtt in",
        "z": "76a089d00ee53037",
        "name": "",
        "topic": "b5/316/platz/lulb",
        "qos": "2",
        "datatype": "auto",
        "broker": "ea6b3a7c.6d0148",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 780,
        "y": 1640,
        "wires": [
            [
                "b623d4845abdfe6f"
            ]
        ]
    },
    {
        "id": "ba0d07e833098370",
        "type": "ui_template",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "name": "Platz Lehrer B",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div style=\"width: 100%; height: 100%; display: flex; flex-direction: column;\">\n    <div style=\"text-align: center;\">Lehrer-B</div>\n    <div id=\"boxlulb\" style=\"background-color: grey; flex: 1;\"></div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            if (payload) {\n                if (payload === 'True') {\n                    document.getElementById('boxlulb').style.backgroundColor = 'green';\n                } else if (payload === 'False') {\n                    document.getElementById('boxlulb').style.backgroundColor = 'red';\n                } else {\n                    document.getElementById('boxlulb').style.backgroundColor = 'yellow';\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1260,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "b623d4845abdfe6f",
        "type": "change",
        "z": "76a089d00ee53037",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 1640,
        "wires": [
            [
                "ba0d07e833098370"
            ]
        ]
    },
    {
        "id": "ed42eb09ac9333c0",
        "type": "ui_text",
        "z": "76a089d00ee53037",
        "group": "d5bec1c1ab210c17",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Gr√ºn= payload (True) + Topic richtig",
        "format": "",
        "layout": "row-center",
        "className": "",
        "x": 1580,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c837fd758c5a3a57",
        "type": "ui_text",
        "z": "76a089d00ee53037",
        "group": "92620e0f085e5e89",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Gelb = payload FALSCH / Topic richtig",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1590,
        "y": 1660,
        "wires": []
    },
    {
        "id": "6f27867358e4891e",
        "type": "ui_text",
        "z": "76a089d00ee53037",
        "group": "a73bfd28fdaccfa7",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Rot = payload (False) + Topic richtig",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1590,
        "y": 1700,
        "wires": []
    },
    {
        "id": "ec9af3b818e6fe79",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/lula",
        "url": "/api/platz/lula",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1600,
        "wires": [
            [
                "a968cf1df86e13cb"
            ]
        ]
    },
    {
        "id": "222aa39bdce4b185",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 1600,
        "wires": []
    },
    {
        "id": "a968cf1df86e13cb",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/lula\";\nconst exceptedUrl = \"/api/platz/lula\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1600,
        "wires": [
            [
                "222aa39bdce4b185",
                "b28786a9a9cc6fb4"
            ],
            [
                "222aa39bdce4b185"
            ]
        ]
    },
    {
        "id": "c8a57b0290489db6",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/lulb",
        "url": "/api/platz/lulb",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 1600,
        "wires": [
            [
                "2ee2198aaca5b010"
            ]
        ]
    },
    {
        "id": "36b0ee6578ee2c50",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 1600,
        "wires": []
    },
    {
        "id": "2ee2198aaca5b010",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/lulb\";\nconst exceptedUrl = \"/api/platz/lulb\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1600,
        "wires": [
            [
                "36b0ee6578ee2c50",
                "b623d4845abdfe6f"
            ],
            [
                "36b0ee6578ee2c50"
            ]
        ]
    },
    {
        "id": "5b8055a79a8a5b4a",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/1a",
        "url": "/api/platz/1a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1720,
        "wires": [
            [
                "89dd7d482ab1a29e"
            ]
        ]
    },
    {
        "id": "a8c746083e5fce93",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 1720,
        "wires": []
    },
    {
        "id": "89dd7d482ab1a29e",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/1a\";\nconst exceptedUrl = \"/api/platz/1a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1720,
        "wires": [
            [
                "a8c746083e5fce93",
                "bbb9f1eef6711f1f"
            ],
            [
                "a8c746083e5fce93"
            ]
        ]
    },
    {
        "id": "ea94ee975a2239e7",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/1b",
        "url": "/api/platz/1b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 1720,
        "wires": [
            [
                "91ba401346c8e607"
            ]
        ]
    },
    {
        "id": "02f2179e520f3b30",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 1720,
        "wires": []
    },
    {
        "id": "91ba401346c8e607",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/1b\";\nconst exceptedUrl = \"/api/platz/1b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1720,
        "wires": [
            [
                "02f2179e520f3b30",
                "7f22b07f1a74948e"
            ],
            [
                "02f2179e520f3b30"
            ]
        ]
    },
    {
        "id": "fb312901690cb5fd",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/2a",
        "url": "/api/platz/2a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1840,
        "wires": [
            [
                "da42791890d8a87f"
            ]
        ]
    },
    {
        "id": "487731cbdcbdbbcf",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 1840,
        "wires": []
    },
    {
        "id": "da42791890d8a87f",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/2a\";\nconst exceptedUrl = \"/api/platz/2a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1840,
        "wires": [
            [
                "487731cbdcbdbbcf",
                "7f231232c83af2ae"
            ],
            [
                "487731cbdcbdbbcf"
            ]
        ]
    },
    {
        "id": "2d1e8a41d1d00d6c",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/2b",
        "url": "/api/platz/2b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 1840,
        "wires": [
            [
                "4fdfd35d5e475d69"
            ]
        ]
    },
    {
        "id": "aeb1381c9ee63b63",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 1840,
        "wires": []
    },
    {
        "id": "4fdfd35d5e475d69",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/2b\";\nconst exceptedUrl = \"/api/platz/2b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1840,
        "wires": [
            [
                "aeb1381c9ee63b63",
                "26983e720e1262a4"
            ],
            [
                "aeb1381c9ee63b63"
            ]
        ]
    },
    {
        "id": "f6a3ae55da3d6c75",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/3a",
        "url": "/api/platz/3a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1960,
        "wires": [
            [
                "0e98e47f781ac8bb"
            ]
        ]
    },
    {
        "id": "1fbf10812bef61dd",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 1960,
        "wires": []
    },
    {
        "id": "0e98e47f781ac8bb",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/3a\";\nconst exceptedUrl = \"/api/platz/3a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1960,
        "wires": [
            [
                "1fbf10812bef61dd",
                "46dfdb1dc0c1cc23"
            ],
            [
                "1fbf10812bef61dd"
            ]
        ]
    },
    {
        "id": "8bbdc493d9bfeaca",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/3b",
        "url": "/api/platz/3b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 1960,
        "wires": [
            [
                "224fcc2aaeddc26b"
            ]
        ]
    },
    {
        "id": "7a2355df33dc2183",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 1960,
        "wires": []
    },
    {
        "id": "224fcc2aaeddc26b",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/3b\";\nconst exceptedUrl = \"/api/platz/3b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1960,
        "wires": [
            [
                "7a2355df33dc2183",
                "36a42a9946080ce7"
            ],
            [
                "7a2355df33dc2183"
            ]
        ]
    },
    {
        "id": "2f41088573563114",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/4a",
        "url": "/api/platz/4a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2060,
        "wires": [
            [
                "3b69e88ec62da0ef"
            ]
        ]
    },
    {
        "id": "48b2fc15f66494bb",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2060,
        "wires": []
    },
    {
        "id": "3b69e88ec62da0ef",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/4a\";\nconst exceptedUrl = \"/api/platz/4a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2060,
        "wires": [
            [
                "48b2fc15f66494bb",
                "6dc40fd3bd351cc7"
            ],
            [
                "48b2fc15f66494bb"
            ]
        ]
    },
    {
        "id": "1b57bbf8e469feb8",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/4b",
        "url": "/api/platz/4b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2060,
        "wires": [
            [
                "ea351d9cf27f1cb9"
            ]
        ]
    },
    {
        "id": "3c2d25a6cded5369",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2060,
        "wires": []
    },
    {
        "id": "ea351d9cf27f1cb9",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/4b\";\nconst exceptedUrl = \"/api/platz/4b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2060,
        "wires": [
            [
                "3c2d25a6cded5369",
                "3b9b83c9e8a1a101"
            ],
            [
                "3c2d25a6cded5369"
            ]
        ]
    },
    {
        "id": "a47a0b9e9f1066cb",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/5a",
        "url": "/api/platz/5a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2160,
        "wires": [
            [
                "8076ab532360c2bb"
            ]
        ]
    },
    {
        "id": "05c31220ce186fcf",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2160,
        "wires": []
    },
    {
        "id": "8076ab532360c2bb",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/5a\";\nconst exceptedUrl = \"/api/platz/5a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2160,
        "wires": [
            [
                "05c31220ce186fcf",
                "a796558066e5f3d7"
            ],
            [
                "05c31220ce186fcf"
            ]
        ]
    },
    {
        "id": "0717e3e64f554bcc",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/5b",
        "url": "/api/platz/5b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2160,
        "wires": [
            [
                "a99d93765a66b8d0"
            ]
        ]
    },
    {
        "id": "e4068ff895b00977",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2160,
        "wires": []
    },
    {
        "id": "a99d93765a66b8d0",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/5b\";\nconst exceptedUrl = \"/api/platz/5b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2160,
        "wires": [
            [
                "e4068ff895b00977",
                "561a504aec37a48e"
            ],
            [
                "e4068ff895b00977"
            ]
        ]
    },
    {
        "id": "0a6fd514760fd12c",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/6a",
        "url": "/api/platz/6a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2280,
        "wires": [
            [
                "b045151aa705c48c"
            ]
        ]
    },
    {
        "id": "d8a6ab44d42f2f98",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2280,
        "wires": []
    },
    {
        "id": "b045151aa705c48c",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/6a\";\nconst exceptedUrl = \"/api/platz/6a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2280,
        "wires": [
            [
                "d8a6ab44d42f2f98",
                "7a8bae25179c75c9"
            ],
            [
                "d8a6ab44d42f2f98"
            ]
        ]
    },
    {
        "id": "cbb4e984f66e7131",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/6b",
        "url": "/api/platz/6b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2280,
        "wires": [
            [
                "b0107b1367f8f15f"
            ]
        ]
    },
    {
        "id": "e17b04047a216428",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2280,
        "wires": []
    },
    {
        "id": "b0107b1367f8f15f",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/6b\";\nconst exceptedUrl = \"/api/platz/6b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2280,
        "wires": [
            [
                "e17b04047a216428",
                "3d557cc3431b8371"
            ],
            [
                "e17b04047a216428"
            ]
        ]
    },
    {
        "id": "08aa594a8a09ae55",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/7a",
        "url": "/api/platz/7a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2400,
        "wires": [
            [
                "52c8498c918a290e"
            ]
        ]
    },
    {
        "id": "97f29a73bad85f06",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2400,
        "wires": []
    },
    {
        "id": "52c8498c918a290e",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/7a\";\nconst exceptedUrl = \"/api/platz/7a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2400,
        "wires": [
            [
                "97f29a73bad85f06",
                "1e690e9d6e1aeaed"
            ],
            [
                "97f29a73bad85f06"
            ]
        ]
    },
    {
        "id": "7016db496fec0d6b",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/7b",
        "url": "/api/platz/7b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2400,
        "wires": [
            [
                "b282733c66bf6c3f"
            ]
        ]
    },
    {
        "id": "c0d3542bb00f329a",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2400,
        "wires": []
    },
    {
        "id": "b282733c66bf6c3f",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/7b\";\nconst exceptedUrl = \"/api/platz/7b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2400,
        "wires": [
            [
                "c0d3542bb00f329a",
                "96bcdb12e9140576"
            ],
            [
                "c0d3542bb00f329a"
            ]
        ]
    },
    {
        "id": "abc53c9deaf046fd",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/8a",
        "url": "/api/platz/8a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2520,
        "wires": [
            [
                "0d3289512cd43134"
            ]
        ]
    },
    {
        "id": "5391f41a179b9829",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2520,
        "wires": []
    },
    {
        "id": "0d3289512cd43134",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/8a\";\nconst exceptedUrl = \"/api/platz/8a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2520,
        "wires": [
            [
                "5391f41a179b9829",
                "918588d48b9b89a0"
            ],
            [
                "5391f41a179b9829"
            ]
        ]
    },
    {
        "id": "4b6a537e95006973",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/8b",
        "url": "/api/platz/8b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2520,
        "wires": [
            [
                "38e68f563c69de53"
            ]
        ]
    },
    {
        "id": "cb6f708ddcd817c8",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2520,
        "wires": []
    },
    {
        "id": "38e68f563c69de53",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/8b\";\nconst exceptedUrl = \"/api/platz/8b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2520,
        "wires": [
            [
                "cb6f708ddcd817c8",
                "832b81d750ef2cee"
            ],
            [
                "cb6f708ddcd817c8"
            ]
        ]
    },
    {
        "id": "80f82ce92d0dee6a",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/9a",
        "url": "/api/platz/9a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2660,
        "wires": [
            [
                "e35ea1ae41ffc108"
            ]
        ]
    },
    {
        "id": "4a83e12ce7607c54",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2660,
        "wires": []
    },
    {
        "id": "e35ea1ae41ffc108",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/9a\";\nconst exceptedUrl = \"/api/platz/9a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2660,
        "wires": [
            [
                "4a83e12ce7607c54",
                "b791d750db71c791"
            ],
            [
                "4a83e12ce7607c54"
            ]
        ]
    },
    {
        "id": "acccd2d22c012f20",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/9b",
        "url": "/api/platz/9b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2660,
        "wires": [
            [
                "d6a2f2d9aadbc864"
            ]
        ]
    },
    {
        "id": "01be7cd27eaa43a3",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2660,
        "wires": []
    },
    {
        "id": "d6a2f2d9aadbc864",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/9b\";\nconst exceptedUrl = \"/api/platz/9b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2660,
        "wires": [
            [
                "01be7cd27eaa43a3",
                "9897b344ec70d2d0"
            ],
            [
                "01be7cd27eaa43a3"
            ]
        ]
    },
    {
        "id": "5c23e814a992fe4f",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/10a",
        "url": "/api/platz/10a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2760,
        "wires": [
            [
                "0d1a7aa67e8d44c5"
            ]
        ]
    },
    {
        "id": "27d81bb1c7509049",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2760,
        "wires": []
    },
    {
        "id": "0d1a7aa67e8d44c5",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/10a\";\nconst exceptedUrl = \"/api/platz/10a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2760,
        "wires": [
            [
                "27d81bb1c7509049",
                "420de54c2e40688e"
            ],
            [
                "27d81bb1c7509049"
            ]
        ]
    },
    {
        "id": "c08e312ca22a8e8e",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/10b",
        "url": "/api/platz/10b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2760,
        "wires": [
            [
                "894951dba1226d91"
            ]
        ]
    },
    {
        "id": "773ca246440f29bd",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2760,
        "wires": []
    },
    {
        "id": "894951dba1226d91",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/10b\";\nconst exceptedUrl = \"/api/platz/10b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2760,
        "wires": [
            [
                "773ca246440f29bd",
                "7d35a3a274a14f26"
            ],
            [
                "773ca246440f29bd"
            ]
        ]
    },
    {
        "id": "7081f03bcbd64a23",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/11a",
        "url": "/api/platz/11a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2880,
        "wires": [
            [
                "ac566dcf7a9494e5"
            ]
        ]
    },
    {
        "id": "26957712ab415ded",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 2880,
        "wires": []
    },
    {
        "id": "ac566dcf7a9494e5",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/11a\";\nconst exceptedUrl = \"/api/platz/11a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2880,
        "wires": [
            [
                "26957712ab415ded"
            ],
            [
                "26957712ab415ded"
            ]
        ]
    },
    {
        "id": "55cb65b30b24fd2f",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/16b",
        "url": "/api/platz/16b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 3480,
        "wires": [
            [
                "c3a9b9b214981d96"
            ]
        ]
    },
    {
        "id": "416c650acee08f8e",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 3480,
        "wires": []
    },
    {
        "id": "c3a9b9b214981d96",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/16b\";\nconst exceptedUrl = \"/api/platz/16b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 3480,
        "wires": [
            [
                "416c650acee08f8e",
                "1f31f84b490e29c2"
            ],
            [
                "416c650acee08f8e"
            ]
        ]
    },
    {
        "id": "c7a675b5b2af7b2a",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/12a",
        "url": "/api/platz/12a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 3000,
        "wires": [
            [
                "93da3dd24fd9d785"
            ]
        ]
    },
    {
        "id": "705e6deae9f1c731",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 3000,
        "wires": []
    },
    {
        "id": "93da3dd24fd9d785",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/12a\";\nconst exceptedUrl = \"/api/platz/12a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3000,
        "wires": [
            [
                "705e6deae9f1c731",
                "e37861352ba75faf"
            ],
            [
                "705e6deae9f1c731"
            ]
        ]
    },
    {
        "id": "0c466c636831aef1",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/11b",
        "url": "/api/platz/11b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 2880,
        "wires": [
            [
                "3c7d318599dc0792"
            ]
        ]
    },
    {
        "id": "ecbce608bd3112aa",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 2880,
        "wires": []
    },
    {
        "id": "3c7d318599dc0792",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/11b\";\nconst exceptedUrl = \"/api/platz/11b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2880,
        "wires": [
            [
                "ecbce608bd3112aa",
                "0a935a9c25db891c"
            ],
            [
                "ecbce608bd3112aa"
            ]
        ]
    },
    {
        "id": "5e2d4ffe744bf0f2",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/12a",
        "url": "/api/platz/12a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 3120,
        "wires": [
            [
                "fee4f0c46fc453c7"
            ]
        ]
    },
    {
        "id": "4860a6381bd78977",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 3120,
        "wires": []
    },
    {
        "id": "fee4f0c46fc453c7",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/12a\";\nconst exceptedUrl = \"/api/platz/12a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3120,
        "wires": [
            [
                "4860a6381bd78977",
                "0883e66f6a7b4639"
            ],
            [
                "4860a6381bd78977"
            ]
        ]
    },
    {
        "id": "598f1c8b4cbf8311",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/12b",
        "url": "/api/platz/12b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 3000,
        "wires": [
            [
                "e548029933fd302b"
            ]
        ]
    },
    {
        "id": "2b3c73c5dcfe9ad0",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 3000,
        "wires": []
    },
    {
        "id": "e548029933fd302b",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/12b\";\nconst exceptedUrl = \"/api/platz/12b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 3000,
        "wires": [
            [
                "2b3c73c5dcfe9ad0",
                "75cd0427b89ac4c2"
            ],
            [
                "2b3c73c5dcfe9ad0"
            ]
        ]
    },
    {
        "id": "cc2ae8a57151dafe",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/14a",
        "url": "/api/platz/14a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 3240,
        "wires": [
            [
                "321c63863c06c172"
            ]
        ]
    },
    {
        "id": "56d3694c91504b9d",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 3240,
        "wires": []
    },
    {
        "id": "321c63863c06c172",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/14a\";\nconst exceptedUrl = \"/api/platz/14a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3240,
        "wires": [
            [
                "56d3694c91504b9d",
                "1b16e850359fcf57"
            ],
            [
                "56d3694c91504b9d"
            ]
        ]
    },
    {
        "id": "db46290b0c81d339",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/13b",
        "url": "/api/platz/13b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 3120,
        "wires": [
            [
                "9ec442032eee0ec7"
            ]
        ]
    },
    {
        "id": "40323dd1ddd4e642",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 3120,
        "wires": []
    },
    {
        "id": "9ec442032eee0ec7",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/13b\";\nconst exceptedUrl = \"/api/platz/13b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 3120,
        "wires": [
            [
                "40323dd1ddd4e642",
                "0b9aed2b1f10f732"
            ],
            [
                "40323dd1ddd4e642"
            ]
        ]
    },
    {
        "id": "0a3792ce9d0a8095",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/15a",
        "url": "/api/platz/15a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 3360,
        "wires": [
            [
                "c68f825879aa0338"
            ]
        ]
    },
    {
        "id": "fec61cf57fb5c28c",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 3360,
        "wires": []
    },
    {
        "id": "c68f825879aa0338",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/14a\";\nconst exceptedUrl = \"/api/platz/14a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3360,
        "wires": [
            [
                "fec61cf57fb5c28c",
                "6924e8cb9053a304"
            ],
            [
                "fec61cf57fb5c28c"
            ]
        ]
    },
    {
        "id": "7fe6779e2b5166cb",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/14b",
        "url": "/api/platz/14b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 3240,
        "wires": [
            [
                "369003b0f50528e3"
            ]
        ]
    },
    {
        "id": "f83d6d55e1910aa8",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 3240,
        "wires": []
    },
    {
        "id": "369003b0f50528e3",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/14b\";\nconst exceptedUrl = \"/api/platz/14b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 3240,
        "wires": [
            [
                "f83d6d55e1910aa8",
                "6f245aed72ce0374"
            ],
            [
                "f83d6d55e1910aa8"
            ]
        ]
    },
    {
        "id": "a8b837d6de70b11d",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/16a",
        "url": "/api/platz/16a",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 3480,
        "wires": [
            [
                "d31a5b6b59c3e9a8"
            ]
        ]
    },
    {
        "id": "55a3cd45e5219bf2",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 3480,
        "wires": []
    },
    {
        "id": "d31a5b6b59c3e9a8",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/16a\";\nconst exceptedUrl = \"/api/platz/16a\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3480,
        "wires": [
            [
                "55a3cd45e5219bf2",
                "3318902d47acb0e2"
            ],
            [
                "55a3cd45e5219bf2"
            ]
        ]
    },
    {
        "id": "0a600690794e3ad0",
        "type": "http in",
        "z": "76a089d00ee53037",
        "name": "/api/platz/15b",
        "url": "/api/platz/15b",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 3360,
        "wires": [
            [
                "8652f85bdda5c284"
            ]
        ]
    },
    {
        "id": "c5d4ee5e79d23254",
        "type": "http response",
        "z": "76a089d00ee53037",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 3360,
        "wires": []
    },
    {
        "id": "8652f85bdda5c284",
        "type": "function",
        "z": "76a089d00ee53037",
        "name": "POST Data  + Check ",
        "func": "// Define the expected topic\nconst expectedTopic = \"b5/316/platz/15b\";\nconst exceptedUrl = \"/api/platz/15b\";\n\nif (!msg.payload) {\n    return [\n        { payload: \"ERROR: Payload is missing.\" }, // MQTT/Error message to output 1\n        { \n            payload: { error: \"Payload is missing. Expected 'True' or 'False'.\" },\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" }, // Ensures proper HTTP response\n            res: msg.res\n        }\n    ];\n}\n\nlet responseMsg = { res: msg.res, headers: { \"Content-Type\": \"application/json\" } };\n\n// Ensure the correct API endpoint\nif (msg.req.url === exceptedUrl) {\n    let outputMessage = { payload: msg.payload, topic: expectedTopic };\n\n    // Check if the payload is valid\n    if (msg.payload === \"True\" || msg.payload === \"False\") {\n        // Send a valid message with both values\n        return [\n            outputMessage,  // Output 1 (valid MQTT message)\n            { statusCode: 200, payload: { success: msg.payload }, res: msg.res } // Output 2 (valid HTTP response)\n        ];\n    } else {\n        // Invalid payload: Send error response + message to MQTT\n        responseMsg.payload = { error: \"Invalid Payload. Expected: 'True' or 'False'.\" };\n        responseMsg.statusCode = 400;\n        \n        return [\n            { payload: \"ERROR: Invalid payload.\" }, // Output 1 (MQTT/Error message)\n            responseMsg // Output 2 (HTTP error response)\n        ];\n    }\n}\n\n// Invalid URL response\nresponseMsg.payload = { error: \"Invalid URL. Expected:\"+exceptedUrl };\nresponseMsg.statusCode = 404;\nreturn [\n    { payload: \"ERROR: Invalid URL.\" }, // Output 1 (MQTT/Error message)\n    responseMsg // Output 2 (HTTP error response)\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 3360,
        "wires": [
            [
                "c5d4ee5e79d23254",
                "8b1b37c8b6453165"
            ],
            [
                "c5d4ee5e79d23254"
            ]
        ]
    },
    {
        "id": "75fbb9c2924e1188",
        "type": "comment",
        "z": "76a089d00ee53037",
        "name": "HTTP -/ MQTT -/ API ",
        "info": "",
        "x": 150,
        "y": 1540,
        "wires": []
    },
    {
        "id": "d8ecfdf2c2705046",
        "type": "ui_text",
        "z": "76a089d00ee53037",
        "group": "c46096c41e98973f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Grau =  Topic falsch",
        "format": "",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1530,
        "y": 1580,
        "wires": []
    },
    {
        "id": "efed105ac8565cd3",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "0c13513e3163f2ac",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 9,
        "height": 1
    },
    {
        "id": "465f6d846bc80a5d",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": 8,
        "height": 1
    },
    {
        "id": "1fc1dba9e88bdbb5",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "88f8f68498c1adf5",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 18,
        "width": 13,
        "height": 1
    },
    {
        "id": "a44f35508d458ecb",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "5620d95991c9833c",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 24,
        "width": 13,
        "height": 1
    },
    {
        "id": "48e25f74690a0911",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "053c09f9909ee92f",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 30,
        "width": 21,
        "height": 1
    },
    {
        "id": "559634a2191b7d18",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "6d26d3624873e631",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 36,
        "width": 24,
        "height": 1
    },
    {
        "id": "e8c5b1d84f483fba",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 39,
        "width": 24,
        "height": 1
    },
    {
        "id": "e9ff085a06ac57c0",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 42,
        "width": 24,
        "height": 1
    },
    {
        "id": "48d7487c78258921",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 45,
        "width": 24,
        "height": 1
    },
    {
        "id": "9296e1fac0ce1b8d",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 48,
        "width": 24,
        "height": 1
    },
    {
        "id": "1ad4373f64e637a0",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 51,
        "width": 22,
        "height": 1
    },
    {
        "id": "c3a0b1c92213ccf2",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 54,
        "width": 16,
        "height": 1
    },
    {
        "id": "af41c7a1cfb178ec",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 58,
        "width": 16,
        "height": 1
    },
    {
        "id": "7588bbb90b41c5c9",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 61,
        "width": 6,
        "height": 1
    },
    {
        "id": "fa9e52435983ec0e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 64,
        "width": 24,
        "height": 1
    },
    {
        "id": "5f1fb8fc89c661cb",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 67,
        "width": 24,
        "height": 1
    },
    {
        "id": "e6e85abf5c139d9e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 70,
        "width": 24,
        "height": 1
    },
    {
        "id": "d9cf4ac5a85ede53",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 73,
        "width": 24,
        "height": 1
    },
    {
        "id": "9679f649c3d198c8",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 76,
        "width": 24,
        "height": 1
    },
    {
        "id": "6c8d28f50cb03876",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 79,
        "width": 24,
        "height": 1
    },
    {
        "id": "b0ca470b4e7bf027",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 82,
        "width": 24,
        "height": 1
    },
    {
        "id": "c77cd3bfee8e97e3",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 85,
        "width": 24,
        "height": 1
    },
    {
        "id": "ac46f6fd483acba5",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 88,
        "width": 24,
        "height": 1
    },
    {
        "id": "6a9a8c72948df4d2",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 91,
        "width": 14,
        "height": 1
    },
    {
        "id": "473143dcc177f973",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 94,
        "width": 2,
        "height": 1
    },
    {
        "id": "bf0b335923d14ddc",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 97,
        "width": 14,
        "height": 1
    },
    {
        "id": "5facd3e9df798ff8",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 100,
        "width": 2,
        "height": 1
    },
    {
        "id": "d0bc810e46727789",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 103,
        "width": 16,
        "height": 1
    },
    {
        "id": "ad106e99a337ec39",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 106,
        "width": 6,
        "height": 1
    },
    {
        "id": "1d4fa4116c86f415",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 109,
        "width": 16,
        "height": 1
    },
    {
        "id": "dc6cbbbfa953fe5c",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 112,
        "width": 6,
        "height": 1
    },
    {
        "id": "35af492f725e4292",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 115,
        "width": 24,
        "height": 1
    },
    {
        "id": "1a89274c411eef0c",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 118,
        "width": 24,
        "height": 1
    },
    {
        "id": "bc15881f3525f947",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 121,
        "width": 24,
        "height": 1
    },
    {
        "id": "30f880eb52d3285e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 124,
        "width": 24,
        "height": 1
    },
    {
        "id": "7d67b2091a0d4cef",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 127,
        "width": 24,
        "height": 1
    },
    {
        "id": "a8a893dfb19be0df",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 130,
        "width": 24,
        "height": 1
    },
    {
        "id": "4406e4396a3ee213",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 133,
        "width": 24,
        "height": 1
    },
    {
        "id": "a34328e48066ca34",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 136,
        "width": 24,
        "height": 1
    },
    {
        "id": "cbe0ab1817726a9c",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 142,
        "width": 24,
        "height": 1
    },
    {
        "id": "25e0795d52e36c5e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 9,
        "height": 1
    },
    {
        "id": "ffa2b0741a5590a4",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 8,
        "height": 1
    },
    {
        "id": "4164f66a18138513",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 3,
        "height": 1
    },
    {
        "id": "0694b21e37ea91a8",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 9,
        "height": 1
    },
    {
        "id": "9bdaca7b6d2e1533",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 8,
        "height": 1
    },
    {
        "id": "4959b190c6bf9ad7",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "e2abc75c0a7768ac",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 19,
        "width": 13,
        "height": 1
    },
    {
        "id": "4de5ac63ab82f9a1",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "4353a1a6626b72b5",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 25,
        "width": 13,
        "height": 1
    },
    {
        "id": "3e71f6200497dc1e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "07096714a7fa5a6a",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 31,
        "width": 21,
        "height": 1
    },
    {
        "id": "4a31bd92a808d3ef",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "2c99d743eb0c3598",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 37,
        "width": 24,
        "height": 1
    },
    {
        "id": "06a3b78c75525d38",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 40,
        "width": 24,
        "height": 1
    },
    {
        "id": "bd1f0643f530b9ae",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 43,
        "width": 24,
        "height": 1
    },
    {
        "id": "c5a8f4373729a355",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 46,
        "width": 24,
        "height": 1
    },
    {
        "id": "e97b9577c5f96083",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 49,
        "width": 24,
        "height": 1
    },
    {
        "id": "44bf7ebd62d379bf",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 52,
        "width": 22,
        "height": 1
    },
    {
        "id": "1eb7bef7675ec438",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 55,
        "width": 16,
        "height": 1
    },
    {
        "id": "b8107da6ca090ffb",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 56,
        "width": 4,
        "height": 1
    },
    {
        "id": "3e1ec7ae796e795e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 59,
        "width": 16,
        "height": 1
    },
    {
        "id": "5ed593c4ecae25c3",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 62,
        "width": 6,
        "height": 1
    },
    {
        "id": "f46db3b6b79b507e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 65,
        "width": 24,
        "height": 1
    },
    {
        "id": "6563a740daf77dda",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 68,
        "width": 24,
        "height": 1
    },
    {
        "id": "0dd13357b462b504",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 71,
        "width": 24,
        "height": 1
    },
    {
        "id": "912dbdab34ef6f78",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 74,
        "width": 24,
        "height": 1
    },
    {
        "id": "b3b64438dee9d43b",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 77,
        "width": 24,
        "height": 1
    },
    {
        "id": "07911aa93e0abd10",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 80,
        "width": 24,
        "height": 1
    },
    {
        "id": "dc4e1db74dfe30b8",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 83,
        "width": 24,
        "height": 1
    },
    {
        "id": "7465068e951b381d",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 86,
        "width": 24,
        "height": 1
    },
    {
        "id": "8f43340722f7804c",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 89,
        "width": 24,
        "height": 1
    },
    {
        "id": "686a2a3be9be2c33",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 92,
        "width": 14,
        "height": 1
    },
    {
        "id": "79eac6497795a3fe",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 95,
        "width": 2,
        "height": 1
    },
    {
        "id": "e53c5678d1862689",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 98,
        "width": 14,
        "height": 1
    },
    {
        "id": "1ca91f6bddc577df",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 101,
        "width": 2,
        "height": 1
    },
    {
        "id": "51ecba17e167e676",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 104,
        "width": 16,
        "height": 1
    },
    {
        "id": "4e1ba3e7e08df056",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 107,
        "width": 6,
        "height": 1
    },
    {
        "id": "e29f280fb2551791",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 110,
        "width": 16,
        "height": 1
    },
    {
        "id": "157f6b4bb6390d65",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 113,
        "width": 6,
        "height": 1
    },
    {
        "id": "d9fc55612a3f149f",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 116,
        "width": 24,
        "height": 1
    },
    {
        "id": "af2106292fe7288a",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 119,
        "width": 24,
        "height": 1
    },
    {
        "id": "5cca5fefd677fe64",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 122,
        "width": 24,
        "height": 1
    },
    {
        "id": "60df17a0515d5b7e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 125,
        "width": 24,
        "height": 1
    },
    {
        "id": "cb0debfb0d30a314",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 128,
        "width": 24,
        "height": 1
    },
    {
        "id": "80cd88e6615a864d",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 131,
        "width": 24,
        "height": 1
    },
    {
        "id": "65e4bd2caa0b6d47",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 134,
        "width": 24,
        "height": 1
    },
    {
        "id": "7b95ceaec4839453",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 137,
        "width": 24,
        "height": 1
    },
    {
        "id": "bc72c4f1df0799b3",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 140,
        "width": 24,
        "height": 1
    },
    {
        "id": "bbe54cb7d6eeeb29",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 143,
        "width": 24,
        "height": 1
    },
    {
        "id": "cb9ca4a6996fe892",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 9,
        "height": 1
    },
    {
        "id": "664a611cab255dc4",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 8,
        "height": 1
    },
    {
        "id": "6ba1793f10f1b757",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "5a7c13f4757cfc4b",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 9,
        "height": 1
    },
    {
        "id": "8e500f073ac68877",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 8,
        "height": 1
    },
    {
        "id": "5666c74d7151ae82",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "eea647f9f2f5849e",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 20,
        "width": 13,
        "height": 1
    },
    {
        "id": "371d4877629d9d00",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "77b10afb9f306d22",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 26,
        "width": 13,
        "height": 1
    },
    {
        "id": "9bb3caaf78dbf8a7",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "fb4401e469bd2cef",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 32,
        "width": 21,
        "height": 1
    },
    {
        "id": "3cf66c17a5610eef",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "c05a84b35a2a2dbd",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 38,
        "width": 24,
        "height": 1
    },
    {
        "id": "c3457013696a1f4f",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 41,
        "width": 24,
        "height": 1
    },
    {
        "id": "731a430e4b3e8a97",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 44,
        "width": 24,
        "height": 1
    },
    {
        "id": "32ec951da94f6310",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 47,
        "width": 24,
        "height": 1
    },
    {
        "id": "b3f59d18aa7885e5",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 50,
        "width": 24,
        "height": 1
    },
    {
        "id": "37553a97bb98a2cf",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 87,
        "width": 24,
        "height": 1
    },
    {
        "id": "a418ef353dd965de",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 96,
        "width": 2,
        "height": 1
    },
    {
        "id": "3ae0a3296916a571",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 99,
        "width": 14,
        "height": 1
    },
    {
        "id": "bafeb90e0ee597f0",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 102,
        "width": 2,
        "height": 1
    },
    {
        "id": "b424f90c27d87898",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 105,
        "width": 16,
        "height": 1
    },
    {
        "id": "948406a6985d05b5",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 108,
        "width": 6,
        "height": 1
    },
    {
        "id": "39f05c62ce4f0972",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 111,
        "width": 16,
        "height": 1
    },
    {
        "id": "aab5a29be10a6ee9",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 114,
        "width": 6,
        "height": 1
    },
    {
        "id": "b60450c5285f5066",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 117,
        "width": 24,
        "height": 1
    },
    {
        "id": "72ec872284ae294f",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 120,
        "width": 24,
        "height": 1
    },
    {
        "id": "9a232a6fd3b65d74",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 123,
        "width": 24,
        "height": 1
    },
    {
        "id": "0b5bcb8547a823e8",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 126,
        "width": 24,
        "height": 1
    },
    {
        "id": "17036db80b1337cf",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 129,
        "width": 24,
        "height": 1
    },
    {
        "id": "09ac5a7a741b2731",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 132,
        "width": 24,
        "height": 1
    },
    {
        "id": "aaa37493e5dcb1e7",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 135,
        "width": 24,
        "height": 1
    },
    {
        "id": "65ed83c358ed2b2a",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 138,
        "width": 24,
        "height": 1
    },
    {
        "id": "8f8576c57f39525c",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "",
        "order": 139,
        "width": 24,
        "height": 1
    },
    {
        "id": "db1a9ffe03a3b1d4",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "92620e0f085e5e89",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "920770612c43eb0c",
        "type": "ui_spacer",
        "z": "76a089d00ee53037",
        "name": "spacer",
        "group": "a73bfd28fdaccfa7",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "ea6b3a7c.6d0148",
        "type": "mqtt-broker",
        "name": "broker.hivemq.com",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c46096c41e98973f",
        "type": "ui_group",
        "name": "Reihe1",
        "tab": "eb703526.f2c32",
        "order": 1,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5bec1c1ab210c17",
        "type": "ui_group",
        "name": "Reihe 2",
        "tab": "eb703526.f2c32",
        "order": 2,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "92620e0f085e5e89",
        "type": "ui_group",
        "name": "Reihe 3",
        "tab": "eb703526.f2c32",
        "order": 3,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a73bfd28fdaccfa7",
        "type": "ui_group",
        "name": "Reihe 4",
        "tab": "eb703526.f2c32",
        "order": 4,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb703526.f2c32",
        "type": "ui_tab",
        "name": "API - HTTP - MQTT - Publish True / False",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]